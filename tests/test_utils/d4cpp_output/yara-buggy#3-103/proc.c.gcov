        -:    0:Source:proc.c
        -:    0:Graph:/home/workspace/libyara/proc.gcno
        -:    0:Data:/home/workspace/libyara/proc.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:/*
        -:    2:Copyright (c) 2007-2013. The YARA Authors. All Rights Reserved.
        -:    3:
        -:    4:Redistribution and use in source and binary forms, with or without modification,
        -:    5:are permitted provided that the following conditions are met:
        -:    6:
        -:    7:1. Redistributions of source code must retain the above copyright notice, this
        -:    8:list of conditions and the following disclaimer.
        -:    9:
        -:   10:2. Redistributions in binary form must reproduce the above copyright notice,
        -:   11:this list of conditions and the following disclaimer in the documentation and/or
        -:   12:other materials provided with the distribution.
        -:   13:
        -:   14:3. Neither the name of the copyright holder nor the names of its contributors
        -:   15:may be used to endorse or promote products derived from this software without
        -:   16:specific prior written permission.
        -:   17:
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:   22:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:   25:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:*/
        -:   29:
        -:   30:#include <yara/error.h>
        -:   31:#include <yara/proc.h>
        -:   32:#include <yara/mem.h>
        -:   33:
        -:   34:int _yr_process_attach(int, YR_PROC_ITERATOR_CTX*);
        -:   35:int _yr_process_detach(YR_PROC_ITERATOR_CTX*);
        -:   36:
    #####:   37:YR_API int yr_process_open_iterator(
        -:   38:    int pid,
        -:   39:    YR_MEMORY_BLOCK_ITERATOR* iterator)
        -:   40:{
    #####:   41:  YR_PROC_ITERATOR_CTX* context = (YR_PROC_ITERATOR_CTX*) \
        -:   42:      yr_malloc(sizeof(YR_PROC_ITERATOR_CTX));
        -:   43:
    #####:   44:  if (context == NULL)
    #####:   45:    return ERROR_INSUFFICIENT_MEMORY;
        -:   46:
    #####:   47:  iterator->context = context;
    #####:   48:  iterator->first = yr_process_get_first_memory_block;
    #####:   49:  iterator->next = yr_process_get_next_memory_block;
        -:   50:
    #####:   51:  context->buffer = NULL;
    #####:   52:  context->buffer_size = 0;
    #####:   53:  context->current_block.base = 0;
    #####:   54:  context->current_block.size = 0;
    #####:   55:  context->current_block.context = context;
    #####:   56:  context->current_block.fetch_data = yr_process_fetch_memory_block_data;
    #####:   57:  context->proc_info = NULL;
        -:   58:
    #####:   59:  return _yr_process_attach(pid, context);
        -:   60:}
        -:   61:
        -:   62:
    #####:   63:YR_API int yr_process_close_iterator(
        -:   64:    YR_MEMORY_BLOCK_ITERATOR* iterator)
        -:   65:{
    #####:   66:  YR_PROC_ITERATOR_CTX* context = (YR_PROC_ITERATOR_CTX*) iterator->context;
        -:   67:
    #####:   68:  if (context != NULL)
        -:   69:  {
    #####:   70:    _yr_process_detach(context);
        -:   71:
    #####:   72:    if (context->buffer != NULL)
    #####:   73:      yr_free((void*) context->buffer);
        -:   74:
    #####:   75:    yr_free(context->proc_info);
    #####:   76:    yr_free(context);
        -:   77:
    #####:   78:    iterator->context = NULL;
        -:   79:  }
        -:   80:
    #####:   81:  return ERROR_SUCCESS;
        -:   82:}
