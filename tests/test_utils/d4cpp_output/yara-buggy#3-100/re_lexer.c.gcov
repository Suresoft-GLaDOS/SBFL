        -:    0:Source:re_lexer.c
        -:    0:Graph:/home/workspace/libyara/re_lexer.gcno
        -:    0:Data:/home/workspace/libyara/re_lexer.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#line 2 "re_lexer.c"
        -:    2:
        -:    3:#line 4 "re_lexer.c"
        -:    4:
        -:    5:#define  YY_INT_ALIGNED short int
        -:    6:
        -:    7:/* A lexical scanner generated by flex */
        -:    8:
        -:    9:#define FLEX_SCANNER
        -:   10:#define YY_FLEX_MAJOR_VERSION 2
        -:   11:#define YY_FLEX_MINOR_VERSION 6
        -:   12:#define YY_FLEX_SUBMINOR_VERSION 4
        -:   13:#if YY_FLEX_SUBMINOR_VERSION > 0
        -:   14:#define FLEX_BETA
        -:   15:#endif
        -:   16:
        -:   17:#ifdef yy_create_buffer
        -:   18:#define re_yy_create_buffer_ALREADY_DEFINED
        -:   19:#else
        -:   20:#define yy_create_buffer re_yy_create_buffer
        -:   21:#endif
        -:   22:
        -:   23:#ifdef yy_delete_buffer
        -:   24:#define re_yy_delete_buffer_ALREADY_DEFINED
        -:   25:#else
        -:   26:#define yy_delete_buffer re_yy_delete_buffer
        -:   27:#endif
        -:   28:
        -:   29:#ifdef yy_scan_buffer
        -:   30:#define re_yy_scan_buffer_ALREADY_DEFINED
        -:   31:#else
        -:   32:#define yy_scan_buffer re_yy_scan_buffer
        -:   33:#endif
        -:   34:
        -:   35:#ifdef yy_scan_string
        -:   36:#define re_yy_scan_string_ALREADY_DEFINED
        -:   37:#else
        -:   38:#define yy_scan_string re_yy_scan_string
        -:   39:#endif
        -:   40:
        -:   41:#ifdef yy_scan_bytes
        -:   42:#define re_yy_scan_bytes_ALREADY_DEFINED
        -:   43:#else
        -:   44:#define yy_scan_bytes re_yy_scan_bytes
        -:   45:#endif
        -:   46:
        -:   47:#ifdef yy_init_buffer
        -:   48:#define re_yy_init_buffer_ALREADY_DEFINED
        -:   49:#else
        -:   50:#define yy_init_buffer re_yy_init_buffer
        -:   51:#endif
        -:   52:
        -:   53:#ifdef yy_flush_buffer
        -:   54:#define re_yy_flush_buffer_ALREADY_DEFINED
        -:   55:#else
        -:   56:#define yy_flush_buffer re_yy_flush_buffer
        -:   57:#endif
        -:   58:
        -:   59:#ifdef yy_load_buffer_state
        -:   60:#define re_yy_load_buffer_state_ALREADY_DEFINED
        -:   61:#else
        -:   62:#define yy_load_buffer_state re_yy_load_buffer_state
        -:   63:#endif
        -:   64:
        -:   65:#ifdef yy_switch_to_buffer
        -:   66:#define re_yy_switch_to_buffer_ALREADY_DEFINED
        -:   67:#else
        -:   68:#define yy_switch_to_buffer re_yy_switch_to_buffer
        -:   69:#endif
        -:   70:
        -:   71:#ifdef yypush_buffer_state
        -:   72:#define re_yypush_buffer_state_ALREADY_DEFINED
        -:   73:#else
        -:   74:#define yypush_buffer_state re_yypush_buffer_state
        -:   75:#endif
        -:   76:
        -:   77:#ifdef yypop_buffer_state
        -:   78:#define re_yypop_buffer_state_ALREADY_DEFINED
        -:   79:#else
        -:   80:#define yypop_buffer_state re_yypop_buffer_state
        -:   81:#endif
        -:   82:
        -:   83:#ifdef yyensure_buffer_stack
        -:   84:#define re_yyensure_buffer_stack_ALREADY_DEFINED
        -:   85:#else
        -:   86:#define yyensure_buffer_stack re_yyensure_buffer_stack
        -:   87:#endif
        -:   88:
        -:   89:#ifdef yylex
        -:   90:#define re_yylex_ALREADY_DEFINED
        -:   91:#else
        -:   92:#define yylex re_yylex
        -:   93:#endif
        -:   94:
        -:   95:#ifdef yyrestart
        -:   96:#define re_yyrestart_ALREADY_DEFINED
        -:   97:#else
        -:   98:#define yyrestart re_yyrestart
        -:   99:#endif
        -:  100:
        -:  101:#ifdef yylex_init
        -:  102:#define re_yylex_init_ALREADY_DEFINED
        -:  103:#else
        -:  104:#define yylex_init re_yylex_init
        -:  105:#endif
        -:  106:
        -:  107:#ifdef yylex_init_extra
        -:  108:#define re_yylex_init_extra_ALREADY_DEFINED
        -:  109:#else
        -:  110:#define yylex_init_extra re_yylex_init_extra
        -:  111:#endif
        -:  112:
        -:  113:#ifdef yylex_destroy
        -:  114:#define re_yylex_destroy_ALREADY_DEFINED
        -:  115:#else
        -:  116:#define yylex_destroy re_yylex_destroy
        -:  117:#endif
        -:  118:
        -:  119:#ifdef yyget_debug
        -:  120:#define re_yyget_debug_ALREADY_DEFINED
        -:  121:#else
        -:  122:#define yyget_debug re_yyget_debug
        -:  123:#endif
        -:  124:
        -:  125:#ifdef yyset_debug
        -:  126:#define re_yyset_debug_ALREADY_DEFINED
        -:  127:#else
        -:  128:#define yyset_debug re_yyset_debug
        -:  129:#endif
        -:  130:
        -:  131:#ifdef yyget_extra
        -:  132:#define re_yyget_extra_ALREADY_DEFINED
        -:  133:#else
        -:  134:#define yyget_extra re_yyget_extra
        -:  135:#endif
        -:  136:
        -:  137:#ifdef yyset_extra
        -:  138:#define re_yyset_extra_ALREADY_DEFINED
        -:  139:#else
        -:  140:#define yyset_extra re_yyset_extra
        -:  141:#endif
        -:  142:
        -:  143:#ifdef yyget_in
        -:  144:#define re_yyget_in_ALREADY_DEFINED
        -:  145:#else
        -:  146:#define yyget_in re_yyget_in
        -:  147:#endif
        -:  148:
        -:  149:#ifdef yyset_in
        -:  150:#define re_yyset_in_ALREADY_DEFINED
        -:  151:#else
        -:  152:#define yyset_in re_yyset_in
        -:  153:#endif
        -:  154:
        -:  155:#ifdef yyget_out
        -:  156:#define re_yyget_out_ALREADY_DEFINED
        -:  157:#else
        -:  158:#define yyget_out re_yyget_out
        -:  159:#endif
        -:  160:
        -:  161:#ifdef yyset_out
        -:  162:#define re_yyset_out_ALREADY_DEFINED
        -:  163:#else
        -:  164:#define yyset_out re_yyset_out
        -:  165:#endif
        -:  166:
        -:  167:#ifdef yyget_leng
        -:  168:#define re_yyget_leng_ALREADY_DEFINED
        -:  169:#else
        -:  170:#define yyget_leng re_yyget_leng
        -:  171:#endif
        -:  172:
        -:  173:#ifdef yyget_text
        -:  174:#define re_yyget_text_ALREADY_DEFINED
        -:  175:#else
        -:  176:#define yyget_text re_yyget_text
        -:  177:#endif
        -:  178:
        -:  179:#ifdef yyget_lineno
        -:  180:#define re_yyget_lineno_ALREADY_DEFINED
        -:  181:#else
        -:  182:#define yyget_lineno re_yyget_lineno
        -:  183:#endif
        -:  184:
        -:  185:#ifdef yyset_lineno
        -:  186:#define re_yyset_lineno_ALREADY_DEFINED
        -:  187:#else
        -:  188:#define yyset_lineno re_yyset_lineno
        -:  189:#endif
        -:  190:
        -:  191:#ifdef yyget_column
        -:  192:#define re_yyget_column_ALREADY_DEFINED
        -:  193:#else
        -:  194:#define yyget_column re_yyget_column
        -:  195:#endif
        -:  196:
        -:  197:#ifdef yyset_column
        -:  198:#define re_yyset_column_ALREADY_DEFINED
        -:  199:#else
        -:  200:#define yyset_column re_yyset_column
        -:  201:#endif
        -:  202:
        -:  203:#ifdef yywrap
        -:  204:#define re_yywrap_ALREADY_DEFINED
        -:  205:#else
        -:  206:#define yywrap re_yywrap
        -:  207:#endif
        -:  208:
        -:  209:#ifdef yyget_lval
        -:  210:#define re_yyget_lval_ALREADY_DEFINED
        -:  211:#else
        -:  212:#define yyget_lval re_yyget_lval
        -:  213:#endif
        -:  214:
        -:  215:#ifdef yyset_lval
        -:  216:#define re_yyset_lval_ALREADY_DEFINED
        -:  217:#else
        -:  218:#define yyset_lval re_yyset_lval
        -:  219:#endif
        -:  220:
        -:  221:#ifdef yyalloc
        -:  222:#define re_yyalloc_ALREADY_DEFINED
        -:  223:#else
        -:  224:#define yyalloc re_yyalloc
        -:  225:#endif
        -:  226:
        -:  227:#ifdef yyrealloc
        -:  228:#define re_yyrealloc_ALREADY_DEFINED
        -:  229:#else
        -:  230:#define yyrealloc re_yyrealloc
        -:  231:#endif
        -:  232:
        -:  233:#ifdef yyfree
        -:  234:#define re_yyfree_ALREADY_DEFINED
        -:  235:#else
        -:  236:#define yyfree re_yyfree
        -:  237:#endif
        -:  238:
        -:  239:/* First, we deal with  platform-specific or compiler-specific issues. */
        -:  240:
        -:  241:/* begin standard C headers. */
        -:  242:#include <stdio.h>
        -:  243:#include <string.h>
        -:  244:#include <errno.h>
        -:  245:#include <stdlib.h>
        -:  246:
        -:  247:/* end standard C headers. */
        -:  248:
        -:  249:/* flex integer type definitions */
        -:  250:
        -:  251:#ifndef FLEXINT_H
        -:  252:#define FLEXINT_H
        -:  253:
        -:  254:/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
        -:  255:
        -:  256:#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
        -:  257:
        -:  258:/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
        -:  259: * if you want the limit (max/min) macros for int types. 
        -:  260: */
        -:  261:#ifndef __STDC_LIMIT_MACROS
        -:  262:#define __STDC_LIMIT_MACROS 1
        -:  263:#endif
        -:  264:
        -:  265:#include <inttypes.h>
        -:  266:typedef int8_t flex_int8_t;
        -:  267:typedef uint8_t flex_uint8_t;
        -:  268:typedef int16_t flex_int16_t;
        -:  269:typedef uint16_t flex_uint16_t;
        -:  270:typedef int32_t flex_int32_t;
        -:  271:typedef uint32_t flex_uint32_t;
        -:  272:#else
        -:  273:typedef signed char flex_int8_t;
        -:  274:typedef short int flex_int16_t;
        -:  275:typedef int flex_int32_t;
        -:  276:typedef unsigned char flex_uint8_t; 
        -:  277:typedef unsigned short int flex_uint16_t;
        -:  278:typedef unsigned int flex_uint32_t;
        -:  279:
        -:  280:/* Limits of integral types. */
        -:  281:#ifndef INT8_MIN
        -:  282:#define INT8_MIN               (-128)
        -:  283:#endif
        -:  284:#ifndef INT16_MIN
        -:  285:#define INT16_MIN              (-32767-1)
        -:  286:#endif
        -:  287:#ifndef INT32_MIN
        -:  288:#define INT32_MIN              (-2147483647-1)
        -:  289:#endif
        -:  290:#ifndef INT8_MAX
        -:  291:#define INT8_MAX               (127)
        -:  292:#endif
        -:  293:#ifndef INT16_MAX
        -:  294:#define INT16_MAX              (32767)
        -:  295:#endif
        -:  296:#ifndef INT32_MAX
        -:  297:#define INT32_MAX              (2147483647)
        -:  298:#endif
        -:  299:#ifndef UINT8_MAX
        -:  300:#define UINT8_MAX              (255U)
        -:  301:#endif
        -:  302:#ifndef UINT16_MAX
        -:  303:#define UINT16_MAX             (65535U)
        -:  304:#endif
        -:  305:#ifndef UINT32_MAX
        -:  306:#define UINT32_MAX             (4294967295U)
        -:  307:#endif
        -:  308:
        -:  309:#ifndef SIZE_MAX
        -:  310:#define SIZE_MAX               (~(size_t)0)
        -:  311:#endif
        -:  312:
        -:  313:#endif /* ! C99 */
        -:  314:
        -:  315:#endif /* ! FLEXINT_H */
        -:  316:
        -:  317:/* begin standard C++ headers. */
        -:  318:
        -:  319:/* TODO: this is always defined, so inline it */
        -:  320:#define yyconst const
        -:  321:
        -:  322:#if defined(__GNUC__) && __GNUC__ >= 3
        -:  323:#define yynoreturn __attribute__((__noreturn__))
        -:  324:#else
        -:  325:#define yynoreturn
        -:  326:#endif
        -:  327:
        -:  328:/* Returned upon end-of-file. */
        -:  329:#define YY_NULL 0
        -:  330:
        -:  331:/* Promotes a possibly negative, possibly signed char to an
        -:  332: *   integer in range [0..255] for use as an array index.
        -:  333: */
        -:  334:#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
        -:  335:
        -:  336:/* An opaque pointer. */
        -:  337:#ifndef YY_TYPEDEF_YY_SCANNER_T
        -:  338:#define YY_TYPEDEF_YY_SCANNER_T
        -:  339:typedef void* yyscan_t;
        -:  340:#endif
        -:  341:
        -:  342:/* For convenience, these vars (plus the bison vars far below)
        -:  343:   are macros in the reentrant scanner. */
        -:  344:#define yyin yyg->yyin_r
        -:  345:#define yyout yyg->yyout_r
        -:  346:#define yyextra yyg->yyextra_r
        -:  347:#define yyleng yyg->yyleng_r
        -:  348:#define yytext yyg->yytext_r
        -:  349:#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
        -:  350:#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
        -:  351:#define yy_flex_debug yyg->yy_flex_debug_r
        -:  352:
        -:  353:/* Enter a start condition.  This macro really ought to take a parameter,
        -:  354: * but we do it the disgusting crufty way forced on us by the ()-less
        -:  355: * definition of BEGIN.
        -:  356: */
        -:  357:#define BEGIN yyg->yy_start = 1 + 2 *
        -:  358:/* Translate the current start state into a value that can be later handed
        -:  359: * to BEGIN to return to the state.  The YYSTATE alias is for lex
        -:  360: * compatibility.
        -:  361: */
        -:  362:#define YY_START ((yyg->yy_start - 1) / 2)
        -:  363:#define YYSTATE YY_START
        -:  364:/* Action number for EOF rule of a given start state. */
        -:  365:#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
        -:  366:/* Special action meaning "start processing a new file". */
        -:  367:#define YY_NEW_FILE yyrestart( yyin , yyscanner )
        -:  368:#define YY_END_OF_BUFFER_CHAR 0
        -:  369:
        -:  370:/* Size of default input buffer. */
        -:  371:#ifndef YY_BUF_SIZE
        -:  372:#ifdef __ia64__
        -:  373:/* On IA-64, the buffer size is 16k, not 8k.
        -:  374: * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
        -:  375: * Ditto for the __ia64__ case accordingly.
        -:  376: */
        -:  377:#define YY_BUF_SIZE 32768
        -:  378:#else
        -:  379:#define YY_BUF_SIZE 16384
        -:  380:#endif /* __ia64__ */
        -:  381:#endif
        -:  382:
        -:  383:/* The state buf must be large enough to hold one state per character in the main buffer.
        -:  384: */
        -:  385:#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
        -:  386:
        -:  387:#ifndef YY_TYPEDEF_YY_BUFFER_STATE
        -:  388:#define YY_TYPEDEF_YY_BUFFER_STATE
        -:  389:typedef struct yy_buffer_state *YY_BUFFER_STATE;
        -:  390:#endif
        -:  391:
        -:  392:#ifndef YY_TYPEDEF_YY_SIZE_T
        -:  393:#define YY_TYPEDEF_YY_SIZE_T
        -:  394:typedef size_t yy_size_t;
        -:  395:#endif
        -:  396:
        -:  397:#define EOB_ACT_CONTINUE_SCAN 0
        -:  398:#define EOB_ACT_END_OF_FILE 1
        -:  399:#define EOB_ACT_LAST_MATCH 2
        -:  400:    
        -:  401:    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
        -:  402:     *       access to the local variable yy_act. Since yyless() is a macro, it would break
        -:  403:     *       existing scanners that call yyless() from OUTSIDE yylex.
        -:  404:     *       One obvious solution it to make yy_act a global. I tried that, and saw
        -:  405:     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
        -:  406:     *       normally declared as a register variable-- so it is not worth it.
        -:  407:     */
        -:  408:    #define  YY_LESS_LINENO(n) \
        -:  409:            do { \
        -:  410:                int yyl;\
        -:  411:                for ( yyl = n; yyl < yyleng; ++yyl )\
        -:  412:                    if ( yytext[yyl] == '\n' )\
        -:  413:                        --yylineno;\
        -:  414:            }while(0)
        -:  415:    #define YY_LINENO_REWIND_TO(dst) \
        -:  416:            do {\
        -:  417:                const char *p;\
        -:  418:                for ( p = yy_cp-1; p >= (dst); --p)\
        -:  419:                    if ( *p == '\n' )\
        -:  420:                        --yylineno;\
        -:  421:            }while(0)
        -:  422:    
        -:  423:/* Return all but the first "n" matched characters back to the input stream. */
        -:  424:#define yyless(n) \
        -:  425:	do \
        -:  426:		{ \
        -:  427:		/* Undo effects of setting up yytext. */ \
        -:  428:        int yyless_macro_arg = (n); \
        -:  429:        YY_LESS_LINENO(yyless_macro_arg);\
        -:  430:		*yy_cp = yyg->yy_hold_char; \
        -:  431:		YY_RESTORE_YY_MORE_OFFSET \
        -:  432:		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
        -:  433:		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        -:  434:		} \
        -:  435:	while ( 0 )
        -:  436:#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )
        -:  437:
        -:  438:#ifndef YY_STRUCT_YY_BUFFER_STATE
        -:  439:#define YY_STRUCT_YY_BUFFER_STATE
        -:  440:struct yy_buffer_state
        -:  441:	{
        -:  442:	FILE *yy_input_file;
        -:  443:
        -:  444:	char *yy_ch_buf;		/* input buffer */
        -:  445:	char *yy_buf_pos;		/* current position in input buffer */
        -:  446:
        -:  447:	/* Size of input buffer in bytes, not including room for EOB
        -:  448:	 * characters.
        -:  449:	 */
        -:  450:	int yy_buf_size;
        -:  451:
        -:  452:	/* Number of characters read into yy_ch_buf, not including EOB
        -:  453:	 * characters.
        -:  454:	 */
        -:  455:	int yy_n_chars;
        -:  456:
        -:  457:	/* Whether we "own" the buffer - i.e., we know we created it,
        -:  458:	 * and can realloc() it to grow it, and should free() it to
        -:  459:	 * delete it.
        -:  460:	 */
        -:  461:	int yy_is_our_buffer;
        -:  462:
        -:  463:	/* Whether this is an "interactive" input source; if so, and
        -:  464:	 * if we're using stdio for input, then we want to use getc()
        -:  465:	 * instead of fread(), to make sure we stop fetching input after
        -:  466:	 * each newline.
        -:  467:	 */
        -:  468:	int yy_is_interactive;
        -:  469:
        -:  470:	/* Whether we're considered to be at the beginning of a line.
        -:  471:	 * If so, '^' rules will be active on the next match, otherwise
        -:  472:	 * not.
        -:  473:	 */
        -:  474:	int yy_at_bol;
        -:  475:
        -:  476:    int yy_bs_lineno; /**< The line count. */
        -:  477:    int yy_bs_column; /**< The column count. */
        -:  478:
        -:  479:	/* Whether to try to fill the input buffer when we reach the
        -:  480:	 * end of it.
        -:  481:	 */
        -:  482:	int yy_fill_buffer;
        -:  483:
        -:  484:	int yy_buffer_status;
        -:  485:
        -:  486:#define YY_BUFFER_NEW 0
        -:  487:#define YY_BUFFER_NORMAL 1
        -:  488:	/* When an EOF's been seen but there's still some text to process
        -:  489:	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
        -:  490:	 * shouldn't try reading from the input source any more.  We might
        -:  491:	 * still have a bunch of tokens to match, though, because of
        -:  492:	 * possible backing-up.
        -:  493:	 *
        -:  494:	 * When we actually see the EOF, we change the status to "new"
        -:  495:	 * (via yyrestart()), so that the user can continue scanning by
        -:  496:	 * just pointing yyin at a new input file.
        -:  497:	 */
        -:  498:#define YY_BUFFER_EOF_PENDING 2
        -:  499:
        -:  500:	};
        -:  501:#endif /* !YY_STRUCT_YY_BUFFER_STATE */
        -:  502:
        -:  503:/* We provide macros for accessing buffer states in case in the
        -:  504: * future we want to put the buffer states in a more general
        -:  505: * "scanner state".
        -:  506: *
        -:  507: * Returns the top of the stack, or NULL.
        -:  508: */
        -:  509:#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
        -:  510:                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
        -:  511:                          : NULL)
        -:  512:/* Same as previous macro, but useful when we know that the buffer stack is not
        -:  513: * NULL or when we need an lvalue. For internal use only.
        -:  514: */
        -:  515:#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]
        -:  516:
        -:  517:void yyrestart ( FILE *input_file , yyscan_t yyscanner );
        -:  518:void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
        -:  519:YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
        -:  520:void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
        -:  521:void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
        -:  522:void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
        -:  523:void yypop_buffer_state ( yyscan_t yyscanner );
        -:  524:
        -:  525:static void yyensure_buffer_stack ( yyscan_t yyscanner );
        -:  526:static void yy_load_buffer_state ( yyscan_t yyscanner );
        -:  527:static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
        -:  528:#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)
        -:  529:
        -:  530:YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
        -:  531:YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
        -:  532:YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );
        -:  533:
        -:  534:void *yyalloc ( yy_size_t , yyscan_t yyscanner );
        -:  535:void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
        -:  536:void yyfree ( void * , yyscan_t yyscanner );
        -:  537:
        -:  538:#define yy_new_buffer yy_create_buffer
        -:  539:#define yy_set_interactive(is_interactive) \
        -:  540:	{ \
        -:  541:	if ( ! YY_CURRENT_BUFFER ){ \
        -:  542:        yyensure_buffer_stack (yyscanner); \
        -:  543:		YY_CURRENT_BUFFER_LVALUE =    \
        -:  544:            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
        -:  545:	} \
        -:  546:	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
        -:  547:	}
        -:  548:#define yy_set_bol(at_bol) \
        -:  549:	{ \
        -:  550:	if ( ! YY_CURRENT_BUFFER ){\
        -:  551:        yyensure_buffer_stack (yyscanner); \
        -:  552:		YY_CURRENT_BUFFER_LVALUE =    \
        -:  553:            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
        -:  554:	} \
        -:  555:	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
        -:  556:	}
        -:  557:#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
        -:  558:
        -:  559:/* Begin user sect3 */
        -:  560:
        -:  561:#define re_yywrap(yyscanner) (/*CONSTCOND*/1)
        -:  562:#define YY_SKIP_YYWRAP
        -:  563:typedef flex_uint8_t YY_CHAR;
        -:  564:
        -:  565:typedef int yy_state_type;
        -:  566:
        -:  567:#define yytext_ptr yytext_r
        -:  568:
        -:  569:static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
        -:  570:static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
        -:  571:static int yy_get_next_buffer ( yyscan_t yyscanner );
        -:  572:static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );
        -:  573:
        -:  574:/* Done after the current pattern has been matched and before the
        -:  575: * corresponding action - sets up yytext.
        -:  576: */
        -:  577:#define YY_DO_BEFORE_ACTION \
        -:  578:	yyg->yytext_ptr = yy_bp; \
        -:  579:	yyleng = (int) (yy_cp - yy_bp); \
        -:  580:	yyg->yy_hold_char = *yy_cp; \
        -:  581:	*yy_cp = '\0'; \
        -:  582:	yyg->yy_c_buf_p = yy_cp;
        -:  583:#define YY_NUM_RULES 29
        -:  584:#define YY_END_OF_BUFFER 30
        -:  585:/* This struct is not used in this scanner,
        -:  586:   but its presence is necessary. */
        -:  587:struct yy_trans_info
        -:  588:	{
        -:  589:	flex_int32_t yy_verify;
        -:  590:	flex_int32_t yy_nxt;
        -:  591:	};
        -:  592:static const flex_int16_t yy_accept[45] =
        -:  593:    {   0,
        -:  594:        0,    0,    0,    0,   30,    7,    7,   28,    6,   17,
        -:  595:        7,   27,   29,   26,   18,    5,    3,   16,   15,   13,
        -:  596:       11,    9,   14,   12,   10,    8,    0,    0,    0,    0,
        -:  597:       25,   23,   21,   24,   22,   20,    0,    4,    0,    1,
        -:  598:        2,   19,    0,    0
        -:  599:    } ;
        -:  600:
        -:  601:static const YY_CHAR yy_ec[256] =
        -:  602:    {   0,
        -:  603:        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        -:  604:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  605:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  606:        1,    1,    1,    1,    1,    3,    1,    1,    1,    3,
        -:  607:        3,    3,    3,    4,    5,    3,    1,    6,    6,    6,
        -:  608:        6,    6,    6,    6,    6,    6,    6,    1,    1,    1,
        -:  609:        1,    1,    3,    1,    7,    8,    7,    9,    7,    7,
        -:  610:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  611:        1,    1,   10,    1,    1,    1,   11,    1,    1,    1,
        -:  612:       12,   13,   14,   15,    1,    1,    7,   16,    7,   17,
        -:  613:
        -:  614:        7,    7,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  615:        1,    1,    1,    1,   18,    1,    1,    1,   19,   20,
        -:  616:        1,    1,   21,    3,   22,    1,    1,    1,    1,    1,
        -:  617:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  618:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  619:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  620:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  621:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  622:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  623:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  624:
        -:  625:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  626:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  627:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  628:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  629:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  630:        1,    1,    1,    1,    1
        -:  631:    } ;
        -:  632:
        -:  633:static const YY_CHAR yy_meta[23] =
        -:  634:    {   0,
        -:  635:        1,    2,    1,    1,    3,    4,    4,    4,    4,    1,
        -:  636:        1,    1,    1,    5,    1,    4,    4,    1,    1,    1,
        -:  637:        1,    1
        -:  638:    } ;
        -:  639:
        -:  640:static const flex_int16_t yy_base[51] =
        -:  641:    {   0,
        -:  642:        0,   20,    3,    5,   50,   89,   89,   89,   10,   36,
        -:  643:        0,   44,   43,   47,   38,   89,   26,   33,   89,   89,
        -:  644:       89,   89,   89,   89,   89,   89,    4,    5,    0,   33,
        -:  645:       32,   31,   29,   26,   24,   23,   15,   89,    8,   89,
        -:  646:       89,   89,    0,   89,   67,   72,   77,   82,   84,    4
        -:  647:    } ;
        -:  648:
        -:  649:static const flex_int16_t yy_def[51] =
        -:  650:    {   0,
        -:  651:       45,   45,   46,   46,   44,   44,   44,   44,   44,   44,
        -:  652:       44,   44,   44,   47,   44,   44,   44,   44,   44,   44,
        -:  653:       44,   44,   44,   44,   44,   44,   44,   44,   48,   44,
        -:  654:       44,   44,   44,   44,   44,   44,   49,   44,   44,   44,
        -:  655:       44,   44,   50,    0,   44,   44,   44,   44,   44,   44
        -:  656:    } ;
        -:  657:
        -:  658:static const flex_int16_t yy_nxt[112] =
        -:  659:    {   0,
        -:  660:       44,    7,    8,   27,   13,   28,   13,   30,   27,   39,
        -:  661:       28,    9,   10,   39,    8,   14,   15,   14,   15,   29,
        -:  662:       11,    7,    8,   16,   17,   40,   41,   29,   29,   40,
        -:  663:       29,    9,   10,   29,    8,   29,   29,   29,   18,   38,
        -:  664:       11,   18,   29,   19,   20,   21,   22,   29,   29,   44,
        -:  665:       44,   23,   24,   25,   26,   31,   32,   33,   44,   44,
        -:  666:       44,   44,   44,   34,   35,   36,   37,    6,    6,    6,
        -:  667:        6,    6,   12,   12,   12,   12,   12,   30,   44,   30,
        -:  668:       30,   30,   42,   42,   42,   42,   43,   43,    5,   44,
        -:  669:       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
        -:  670:
        -:  671:       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
        -:  672:       44
        -:  673:    } ;
        -:  674:
        -:  675:static const flex_int16_t yy_chk[112] =
        -:  676:    {   0,
        -:  677:        0,    1,    1,   11,    3,   11,    4,   50,   28,   27,
        -:  678:       28,    1,    1,   39,    1,    3,    3,    4,    4,   37,
        -:  679:        1,    2,    2,    9,    9,   27,   28,   36,   35,   39,
        -:  680:       34,    2,    2,   33,    2,   32,   31,   30,   18,   17,
        -:  681:        2,   10,   15,   10,   10,   10,   10,   13,   12,    5,
        -:  682:        0,   10,   10,   10,   10,   14,   14,   14,    0,    0,
        -:  683:        0,    0,    0,   14,   14,   14,   14,   45,   45,   45,
        -:  684:       45,   45,   46,   46,   46,   46,   46,   47,    0,   47,
        -:  685:       47,   47,   48,   48,   48,   48,   49,   49,   44,   44,
        -:  686:       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
        -:  687:
        -:  688:       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
        -:  689:       44
        -:  690:    } ;
        -:  691:
        -:  692:/* Table of booleans, true if rule could match eol. */
        -:  693:static const flex_int32_t yy_rule_can_match_eol[30] =
        -:  694:    {   0,
        -:  695:0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
        -:  696:    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };
        -:  697:
        -:  698:/* The intent behind this definition is that it'll catch
        -:  699: * any uses of REJECT which flex missed.
        -:  700: */
        -:  701:#define REJECT reject_used_but_not_detected
        -:  702:#define yymore() yymore_used_but_not_detected
        -:  703:#define YY_MORE_ADJ 0
        -:  704:#define YY_RESTORE_YY_MORE_OFFSET
        -:  705:#line 1 "re_lexer.l"
        -:  706:/*
        -:  707:Copyright (c) 2013. The YARA Authors. All Rights Reserved.
        -:  708:
        -:  709:Redistribution and use in source and binary forms, with or without modification,
        -:  710:are permitted provided that the following conditions are met:
        -:  711:
        -:  712:1. Redistributions of source code must retain the above copyright notice, this
        -:  713:list of conditions and the following disclaimer.
        -:  714:
        -:  715:2. Redistributions in binary form must reproduce the above copyright notice,
        -:  716:this list of conditions and the following disclaimer in the documentation and/or
        -:  717:other materials provided with the distribution.
        -:  718:
        -:  719:3. Neither the name of the copyright holder nor the names of its contributors
        -:  720:may be used to endorse or promote products derived from this software without
        -:  721:specific prior written permission.
        -:  722:
        -:  723:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:  724:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:  725:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:  726:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:  727:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:  728:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:  729:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:  730:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:  731:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:  732:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:  733:*/
        -:  734:/* Lexical analyzer for regular expressions */
        -:  735:#line 33 "re_lexer.l"
        -:  736:
        -:  737:/* Disable warnings for unused functions in this file.
        -:  738:
        -:  739:As we redefine YY_FATAL_ERROR macro to use our own function re_yyfatal, the
        -:  740:yy_fatal_error function generated by Flex is not actually used, causing a
        -:  741:compiler warning. Flex doesn't offer any options to remove the yy_fatal_error
        -:  742:function. When they include something like %option noyy_fatal_error as they do
        -:  743:with noyywrap then we can remove this pragma.
        -:  744:*/
        -:  745:
        -:  746:#ifdef __GNUC__
        -:  747:#pragma GCC diagnostic ignored "-Wunused-function"
        -:  748:#endif
        -:  749:
        -:  750:#include <assert.h>
        -:  751:#include <setjmp.h>
        -:  752:
        -:  753:#include <yara/globals.h>
        -:  754:#include <yara/utils.h>
        -:  755:#include <yara/error.h>
        -:  756:#include <yara/limits.h>
        -:  757:#include <yara/mem.h>
        -:  758:#include <yara/re.h>
        -:  759:#include <yara/re_lexer.h>
        -:  760:#include <yara/threading.h>
        -:  761:#include <yara/strutils.h>
        -:  762:
        -:  763:
        -:  764:#ifdef _WIN32
        -:  765:#define snprintf _snprintf
        -:  766:#endif
        -:  767:
        -:  768:static uint8_t word_chars[] = {
        -:  769:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x03,
        -:  770:    0xFE, 0xFF, 0xFF, 0x87, 0xFE, 0xFF, 0xFF, 0x07,
        -:  771:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        -:  772:    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        -:  773:
        -:  774:
        -:  775:int escaped_char_value(
        -:  776:    char* text,
        -:  777:    uint8_t* value);
        -:  778:
        -:  779:int read_escaped_char(
        -:  780:    yyscan_t yyscanner,
        -:  781:    uint8_t* escaped_char);
        -:  782:
        -:  783:#line 784 "re_lexer.c"
        -:  784:#define YY_NO_UNISTD_H 1
        -:  785:
        -:  786:#line 787 "re_lexer.c"
        -:  787:
        -:  788:#define INITIAL 0
        -:  789:#define char_class 1
        -:  790:
        -:  791:#ifndef YY_NO_UNISTD_H
        -:  792:/* Special case for "unistd.h", since it is non-ANSI. We include it way
        -:  793: * down here because we want the user's section 1 to have been scanned first.
        -:  794: * The user has a chance to override it with an option.
        -:  795: */
        -:  796:#include <unistd.h>
        -:  797:#endif
        -:  798:
        -:  799:#ifndef YY_EXTRA_TYPE
        -:  800:#define YY_EXTRA_TYPE void *
        -:  801:#endif
        -:  802:
        -:  803:/* Holds the entire state of the reentrant scanner. */
        -:  804:struct yyguts_t
        -:  805:    {
        -:  806:
        -:  807:    /* User-defined. Not touched by flex. */
        -:  808:    YY_EXTRA_TYPE yyextra_r;
        -:  809:
        -:  810:    /* The rest are the same as the globals declared in the non-reentrant scanner. */
        -:  811:    FILE *yyin_r, *yyout_r;
        -:  812:    size_t yy_buffer_stack_top; /**< index of top of stack. */
        -:  813:    size_t yy_buffer_stack_max; /**< capacity of stack. */
        -:  814:    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
        -:  815:    char yy_hold_char;
        -:  816:    int yy_n_chars;
        -:  817:    int yyleng_r;
        -:  818:    char *yy_c_buf_p;
        -:  819:    int yy_init;
        -:  820:    int yy_start;
        -:  821:    int yy_did_buffer_switch_on_eof;
        -:  822:    int yy_start_stack_ptr;
        -:  823:    int yy_start_stack_depth;
        -:  824:    int *yy_start_stack;
        -:  825:    yy_state_type yy_last_accepting_state;
        -:  826:    char* yy_last_accepting_cpos;
        -:  827:
        -:  828:    int yylineno_r;
        -:  829:    int yy_flex_debug_r;
        -:  830:
        -:  831:    char *yytext_r;
        -:  832:    int yy_more_flag;
        -:  833:    int yy_more_len;
        -:  834:
        -:  835:    YYSTYPE * yylval_r;
        -:  836:
        -:  837:    }; /* end struct yyguts_t */
        -:  838:
        -:  839:static int yy_init_globals ( yyscan_t yyscanner );
        -:  840:
        -:  841:    /* This must go here because YYSTYPE and YYLTYPE are included
        -:  842:     * from bison output in section 1.*/
        -:  843:    #    define yylval yyg->yylval_r
        -:  844:    
        -:  845:int yylex_init (yyscan_t* scanner);
        -:  846:
        -:  847:int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);
        -:  848:
        -:  849:/* Accessor methods to globals.
        -:  850:   These are made visible to non-reentrant scanners for convenience. */
        -:  851:
        -:  852:int yylex_destroy ( yyscan_t yyscanner );
        -:  853:
        -:  854:int yyget_debug ( yyscan_t yyscanner );
        -:  855:
        -:  856:void yyset_debug ( int debug_flag , yyscan_t yyscanner );
        -:  857:
        -:  858:YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );
        -:  859:
        -:  860:void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );
        -:  861:
        -:  862:FILE *yyget_in ( yyscan_t yyscanner );
        -:  863:
        -:  864:void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );
        -:  865:
        -:  866:FILE *yyget_out ( yyscan_t yyscanner );
        -:  867:
        -:  868:void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );
        -:  869:
        -:  870:			int yyget_leng ( yyscan_t yyscanner );
        -:  871:
        -:  872:char *yyget_text ( yyscan_t yyscanner );
        -:  873:
        -:  874:int yyget_lineno ( yyscan_t yyscanner );
        -:  875:
        -:  876:void yyset_lineno ( int _line_number , yyscan_t yyscanner );
        -:  877:
        -:  878:int yyget_column  ( yyscan_t yyscanner );
        -:  879:
        -:  880:void yyset_column ( int _column_no , yyscan_t yyscanner );
        -:  881:
        -:  882:YYSTYPE * yyget_lval ( yyscan_t yyscanner );
        -:  883:
        -:  884:void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );
        -:  885:
        -:  886:/* Macros after this point can all be overridden by user definitions in
        -:  887: * section 1.
        -:  888: */
        -:  889:
        -:  890:#ifndef YY_SKIP_YYWRAP
        -:  891:#ifdef __cplusplus
        -:  892:extern "C" int yywrap ( yyscan_t yyscanner );
        -:  893:#else
        -:  894:extern int yywrap ( yyscan_t yyscanner );
        -:  895:#endif
        -:  896:#endif
        -:  897:
        -:  898:#ifndef YY_NO_UNPUT
        -:  899:    
        -:  900:#endif
        -:  901:
        -:  902:#ifndef yytext_ptr
        -:  903:static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
        -:  904:#endif
        -:  905:
        -:  906:#ifdef YY_NEED_STRLEN
        -:  907:static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
        -:  908:#endif
        -:  909:
        -:  910:#ifndef YY_NO_INPUT
        -:  911:#ifdef __cplusplus
        -:  912:static int yyinput ( yyscan_t yyscanner );
        -:  913:#else
        -:  914:static int input ( yyscan_t yyscanner );
        -:  915:#endif
        -:  916:
        -:  917:#endif
        -:  918:
        -:  919:/* Amount of stuff to slurp up with each read. */
        -:  920:#ifndef YY_READ_BUF_SIZE
        -:  921:#ifdef __ia64__
        -:  922:/* On IA-64, the buffer size is 16k, not 8k */
        -:  923:#define YY_READ_BUF_SIZE 16384
        -:  924:#else
        -:  925:#define YY_READ_BUF_SIZE 8192
        -:  926:#endif /* __ia64__ */
        -:  927:#endif
        -:  928:
        -:  929:/* Copy whatever the last rule matched to the standard output. */
        -:  930:#ifndef ECHO
        -:  931:/* This used to be an fputs(), but since the string might contain NUL's,
        -:  932: * we now use fwrite().
        -:  933: */
        -:  934:#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
        -:  935:#endif
        -:  936:
        -:  937:/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
        -:  938: * is returned in "result".
        -:  939: */
        -:  940:#ifndef YY_INPUT
        -:  941:#define YY_INPUT(buf,result,max_size) \
        -:  942:	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
        -:  943:		{ \
        -:  944:		int c = '*'; \
        -:  945:		int n; \
        -:  946:		for ( n = 0; n < max_size && \
        -:  947:			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
        -:  948:			buf[n] = (char) c; \
        -:  949:		if ( c == '\n' ) \
        -:  950:			buf[n++] = (char) c; \
        -:  951:		if ( c == EOF && ferror( yyin ) ) \
        -:  952:			YY_FATAL_ERROR( "input in flex scanner failed" ); \
        -:  953:		result = n; \
        -:  954:		} \
        -:  955:	else \
        -:  956:		{ \
        -:  957:		errno=0; \
        -:  958:		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
        -:  959:			{ \
        -:  960:			if( errno != EINTR) \
        -:  961:				{ \
        -:  962:				YY_FATAL_ERROR( "input in flex scanner failed" ); \
        -:  963:				break; \
        -:  964:				} \
        -:  965:			errno=0; \
        -:  966:			clearerr(yyin); \
        -:  967:			} \
        -:  968:		}\
        -:  969:\
        -:  970:
        -:  971:#endif
        -:  972:
        -:  973:/* No semi-colon after return; correct usage is to write "yyterminate();" -
        -:  974: * we don't want an extra ';' after the "return" because that will cause
        -:  975: * some compilers to complain about unreachable statements.
        -:  976: */
        -:  977:#ifndef yyterminate
        -:  978:#define yyterminate() return YY_NULL
        -:  979:#endif
        -:  980:
        -:  981:/* Number of entries by which start-condition stack grows. */
        -:  982:#ifndef YY_START_STACK_INCR
        -:  983:#define YY_START_STACK_INCR 25
        -:  984:#endif
        -:  985:
        -:  986:/* Report a fatal error. */
        -:  987:#ifndef YY_FATAL_ERROR
        -:  988:#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
        -:  989:#endif
        -:  990:
        -:  991:/* end tables serialization structures and prototypes */
        -:  992:
        -:  993:/* Default declaration of generated scanner - a define so the user can
        -:  994: * easily add parameters.
        -:  995: */
        -:  996:#ifndef YY_DECL
        -:  997:#define YY_DECL_IS_OURS 1
        -:  998:
        -:  999:extern int yylex \
        -: 1000:               (YYSTYPE * yylval_param , yyscan_t yyscanner);
        -: 1001:
        -: 1002:#define YY_DECL int yylex \
        -: 1003:               (YYSTYPE * yylval_param , yyscan_t yyscanner)
        -: 1004:#endif /* !YY_DECL */
        -: 1005:
        -: 1006:/* Code executed at the beginning of each rule, after yytext and yyleng
        -: 1007: * have been set up.
        -: 1008: */
        -: 1009:#ifndef YY_USER_ACTION
        -: 1010:#define YY_USER_ACTION
        -: 1011:#endif
        -: 1012:
        -: 1013:/* Code executed at the end of each rule. */
        -: 1014:#ifndef YY_BREAK
        -: 1015:#define YY_BREAK /*LINTED*/break;
        -: 1016:#endif
        -: 1017:
        -: 1018:#define YY_RULE_SETUP \
        -: 1019:	YY_USER_ACTION
        -: 1020:
        -: 1021:/** The main scanner function which does all the work.
        -: 1022: */
    #####: 1023:YY_DECL
        -: 1024:{
        -: 1025:	yy_state_type yy_current_state;
        -: 1026:	char *yy_cp, *yy_bp;
        -: 1027:	int yy_act;
    #####: 1028:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1029:
    #####: 1030:    yylval = yylval_param;
        -: 1031:
    #####: 1032:	if ( !yyg->yy_init )
        -: 1033:		{
    #####: 1034:		yyg->yy_init = 1;
        -: 1035:
        -: 1036:#ifdef YY_USER_INIT
        -: 1037:		YY_USER_INIT;
        -: 1038:#endif
        -: 1039:
    #####: 1040:		if ( ! yyg->yy_start )
    #####: 1041:			yyg->yy_start = 1;	/* first start state */
        -: 1042:
    #####: 1043:		if ( ! yyin )
    #####: 1044:			yyin = stdin;
        -: 1045:
    #####: 1046:		if ( ! yyout )
    #####: 1047:			yyout = stdout;
        -: 1048:
    #####: 1049:		if ( ! YY_CURRENT_BUFFER ) {
    #####: 1050:			yyensure_buffer_stack (yyscanner);
    #####: 1051:			YY_CURRENT_BUFFER_LVALUE =
    #####: 1052:				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
        -: 1053:		}
        -: 1054:
    #####: 1055:		yy_load_buffer_state( yyscanner );
        -: 1056:		}
        -: 1057:
        -: 1058:	{
        -: 1059:#line 100 "re_lexer.l"
        -: 1060:
        -: 1061:
        -: 1062:#line 1063 "re_lexer.c"
        -: 1063:
        -: 1064:	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
        -: 1065:		{
    #####: 1066:		yy_cp = yyg->yy_c_buf_p;
        -: 1067:
        -: 1068:		/* Support of yytext. */
    #####: 1069:		*yy_cp = yyg->yy_hold_char;
        -: 1070:
        -: 1071:		/* yy_bp points to the position in yy_ch_buf of the start of
        -: 1072:		 * the current run.
        -: 1073:		 */
    #####: 1074:		yy_bp = yy_cp;
        -: 1075:
    #####: 1076:		yy_current_state = yyg->yy_start;
    #####: 1077:yy_match:
        -: 1078:		do
        -: 1079:			{
    #####: 1080:			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
    #####: 1081:			if ( yy_accept[yy_current_state] )
        -: 1082:				{
    #####: 1083:				yyg->yy_last_accepting_state = yy_current_state;
    #####: 1084:				yyg->yy_last_accepting_cpos = yy_cp;
        -: 1085:				}
    #####: 1086:			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        -: 1087:				{
    #####: 1088:				yy_current_state = (int) yy_def[yy_current_state];
    #####: 1089:				if ( yy_current_state >= 45 )
    #####: 1090:					yy_c = yy_meta[yy_c];
        -: 1091:				}
    #####: 1092:			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    #####: 1093:			++yy_cp;
        -: 1094:			}
    #####: 1095:		while ( yy_current_state != 44 );
    #####: 1096:		yy_cp = yyg->yy_last_accepting_cpos;
    #####: 1097:		yy_current_state = yyg->yy_last_accepting_state;
        -: 1098:
    #####: 1099:yy_find_action:
    #####: 1100:		yy_act = yy_accept[yy_current_state];
        -: 1101:
    #####: 1102:		YY_DO_BEFORE_ACTION;
        -: 1103:
    #####: 1104:		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
        -: 1105:			{
        -: 1106:			int yyl;
    #####: 1107:			for ( yyl = 0; yyl < yyleng; ++yyl )
    #####: 1108:				if ( yytext[yyl] == '\n' )
        -: 1109:					
    #####: 1110:    do{ yylineno++;
    #####: 1111:        yycolumn=0;
        -: 1112:    }while(0)
        -: 1113:;
        -: 1114:			}
        -: 1115:
    #####: 1116:do_action:	/* This label is used only to access EOF actions. */
        -: 1117:
    #####: 1118:		switch ( yy_act )
        -: 1119:	{ /* beginning of action switch */
    #####: 1120:			case 0: /* must back up */
        -: 1121:			/* undo the effects of YY_DO_BEFORE_ACTION */
    #####: 1122:			*yy_cp = yyg->yy_hold_char;
    #####: 1123:			yy_cp = yyg->yy_last_accepting_cpos;
    #####: 1124:			yy_current_state = yyg->yy_last_accepting_state;
    #####: 1125:			goto yy_find_action;
        -: 1126:
    #####: 1127:case 1:
        -: 1128:YY_RULE_SETUP
        -: 1129:#line 102 "re_lexer.l"
        -: 1130:{
        -: 1131:
        -: 1132:  // Examples: {3,8} {0,5} {,5} {7,}
        -: 1133:
        -: 1134:  int hi_bound;
        -: 1135:  int lo_bound = atoi(yytext + 1);
        -: 1136:
        -: 1137:  char* comma = strchr(yytext, ',');
        -: 1138:
        -: 1139:  if (comma - yytext == strlen(yytext) - 2)
        -: 1140:    // if comma is followed by the closing curly bracket
        -: 1141:    // (example: {2,}) set high bound value to maximum.
        -: 1142:    hi_bound = INT16_MAX;
        -: 1143:  else
        -: 1144:    hi_bound = atoi(comma + 1);
        -: 1145:
        -: 1146:  if (hi_bound > INT16_MAX)
        -: 1147:  {
        -: 1148:    yyerror(yyscanner, lex_env, "repeat interval too large");
        -: 1149:    yyterminate();
        -: 1150:  }
        -: 1151:
        -: 1152:  if (hi_bound < lo_bound || hi_bound < 0 || lo_bound < 0)
        -: 1153:  {
        -: 1154:    yyerror(yyscanner, lex_env, "bad repeat interval");
        -: 1155:    yyterminate();
        -: 1156:  }
        -: 1157:
        -: 1158:  if (hi_bound == 0 && lo_bound == 0)
        -: 1159:  {
        -: 1160:    yyerror(yyscanner, lex_env, "bad repeat interval");
        -: 1161:    yyterminate();
        -: 1162:  }
        -: 1163:
        -: 1164:  yylval->range = (hi_bound << 16) | lo_bound;
        -: 1165:
        -: 1166:  return _RANGE_;
        -: 1167:}
        -: 1168:	YY_BREAK
        -: 1169:case 2:
        -: 1170:YY_RULE_SETUP
        -: 1171:#line 142 "re_lexer.l"
        -: 1172:{
        -: 1173:
        -: 1174:  // Example: {10}
        -: 1175:
        -: 1176:  int value = atoi(yytext + 1);
        -: 1177:
        -: 1178:  // atoi can return a negative value if the input string represents a number
        -: 1179:  // too large to fit in an integer.
        -: 1180:
        -: 1181:  if (value > INT16_MAX || value < 0)
        -: 1182:  {
        -: 1183:    yyerror(yyscanner, lex_env, "repeat interval too large");
        -: 1184:    yyterminate();
        -: 1185:  }
        -: 1186:
        -: 1187:  if (value == 0)
        -: 1188:  {
        -: 1189:    yyerror(yyscanner, lex_env, "bad repeat interval");
        -: 1190:    yyterminate();
        -: 1191:  }
        -: 1192:
        -: 1193:  yylval->range = (value << 16) | value;
        -: 1194:
        -: 1195:  return _RANGE_;
        -: 1196:}
        -: 1197:	YY_BREAK
        -: 1198:case 3:
        -: 1199:YY_RULE_SETUP
        -: 1200:#line 169 "re_lexer.l"
        -: 1201:{
        -: 1202:
        -: 1203:  // Start of a negated character class. Example: [^abcd]
        -: 1204:
        -: 1205:  BEGIN(char_class);
        -: 1206:  memset(LEX_ENV->re_class.bitmap, 0, 32);
        -: 1207:  LEX_ENV->re_class.negated = true;
        -: 1208:}
        -: 1209:	YY_BREAK
        -: 1210:case 4:
        -: 1211:YY_RULE_SETUP
        -: 1212:#line 178 "re_lexer.l"
        -: 1213:{
        -: 1214:
        -: 1215:  // Start of character negated class containing a ].
        -: 1216:  // Example: [^]abc] this must be interpreted as a class
        -: 1217:  // not matching ], a, b, nor c
        -: 1218:
        -: 1219:  BEGIN(char_class);
        -: 1220:  memset(LEX_ENV->re_class.bitmap, 0, 32);
        -: 1221:  LEX_ENV->re_class.negated = true;
        -: 1222:  LEX_ENV->re_class.bitmap[']' / 8] |= 1 << ']' % 8;
        -: 1223:}
        -: 1224:	YY_BREAK
        -: 1225:case 5:
        -: 1226:YY_RULE_SETUP
        -: 1227:#line 191 "re_lexer.l"
        -: 1228:{
        -: 1229:
        -: 1230:  // Start of character class containing a ].
        -: 1231:  // Example: []abc] this must be interpreted as a class
        -: 1232:  // matching ], a, b, or c.
        -: 1233:
        -: 1234:  BEGIN(char_class);
        -: 1235:  memset(LEX_ENV->re_class.bitmap, 0, 32);
        -: 1236:  LEX_ENV->re_class.negated = false;
        -: 1237:  LEX_ENV->re_class.bitmap[']' / 8] |= 1 << ']' % 8;
        -: 1238:}
        -: 1239:	YY_BREAK
        -: 1240:case 6:
        -: 1241:YY_RULE_SETUP
        -: 1242:#line 204 "re_lexer.l"
        -: 1243:{
        -: 1244:
        -: 1245:  // Start of character class. Example: [abcd]
        -: 1246:
        -: 1247:  BEGIN(char_class);
        -: 1248:  memset(LEX_ENV->re_class.bitmap, 0, 32);
        -: 1249:  LEX_ENV->re_class.negated = false;
        -: 1250:}
        -: 1251:	YY_BREAK
        -: 1252:case 7:
        -: 1253:/* rule 7 can match eol */
        -: 1254:YY_RULE_SETUP
        -: 1255:#line 214 "re_lexer.l"
        -: 1256:{
        -: 1257:
        -: 1258:  // Any non-special character is passed as a CHAR token to the scanner.
        -: 1259:
        -: 1260:  yylval->integer = yytext[0];
        -: 1261:  return _CHAR_;
        -: 1262:}
        -: 1263:	YY_BREAK
        -: 1264:case 8:
        -: 1265:YY_RULE_SETUP
        -: 1266:#line 223 "re_lexer.l"
        -: 1267:{
        -: 1268:  return _WORD_CHAR_;
        -: 1269:}
        -: 1270:	YY_BREAK
        -: 1271:case 9:
        -: 1272:YY_RULE_SETUP
        -: 1273:#line 228 "re_lexer.l"
        -: 1274:{
        -: 1275:  return _NON_WORD_CHAR_;
        -: 1276:}
        -: 1277:	YY_BREAK
        -: 1278:case 10:
        -: 1279:YY_RULE_SETUP
        -: 1280:#line 233 "re_lexer.l"
        -: 1281:{
        -: 1282:  return _SPACE_;
        -: 1283:}
        -: 1284:	YY_BREAK
        -: 1285:case 11:
        -: 1286:YY_RULE_SETUP
        -: 1287:#line 238 "re_lexer.l"
        -: 1288:{
        -: 1289:  return _NON_SPACE_;
        -: 1290:}
        -: 1291:	YY_BREAK
        -: 1292:case 12:
        -: 1293:YY_RULE_SETUP
        -: 1294:#line 243 "re_lexer.l"
        -: 1295:{
        -: 1296:  return _DIGIT_;
        -: 1297:}
        -: 1298:	YY_BREAK
        -: 1299:case 13:
        -: 1300:YY_RULE_SETUP
        -: 1301:#line 248 "re_lexer.l"
        -: 1302:{
        -: 1303:  return _NON_DIGIT_;
        -: 1304:}
        -: 1305:	YY_BREAK
        -: 1306:case 14:
        -: 1307:YY_RULE_SETUP
        -: 1308:#line 253 "re_lexer.l"
        -: 1309:{
        -: 1310:  return _WORD_BOUNDARY_;
        -: 1311:}
        -: 1312:	YY_BREAK
        -: 1313:case 15:
        -: 1314:YY_RULE_SETUP
        -: 1315:#line 257 "re_lexer.l"
        -: 1316:{
        -: 1317:  return _NON_WORD_BOUNDARY_;
        -: 1318:}
        -: 1319:	YY_BREAK
        -: 1320:case 16:
        -: 1321:YY_RULE_SETUP
        -: 1322:#line 262 "re_lexer.l"
        -: 1323:{
        -: 1324:
        -: 1325:  yyerror(yyscanner, lex_env, "backreferences are not allowed");
        -: 1326:  yyterminate();
        -: 1327:}
        -: 1328:	YY_BREAK
        -: 1329:case 17:
        -: 1330:YY_RULE_SETUP
        -: 1331:#line 269 "re_lexer.l"
        -: 1332:{
        -: 1333:
        -: 1334:  uint8_t c;
        -: 1335:
        -: 1336:  if (read_escaped_char(yyscanner, &c))
        -: 1337:  {
        -: 1338:    yylval->integer = c;
        -: 1339:    return _CHAR_;
        -: 1340:  }
        -: 1341:  else
        -: 1342:  {
        -: 1343:    yyerror(yyscanner, lex_env, "illegal escape sequence");
        -: 1344:    yyterminate();
        -: 1345:  }
        -: 1346:}
        -: 1347:	YY_BREAK
        -: 1348:case 18:
        -: 1349:YY_RULE_SETUP
        -: 1350:#line 286 "re_lexer.l"
        -: 1351:{
        -: 1352:
        -: 1353:  // End of character class.
        -: 1354:  yylval->re_class = (RE_CLASS*) yr_malloc(sizeof(RE_CLASS));
        -: 1355:  memcpy(yylval->re_class->bitmap, LEX_ENV->re_class.bitmap, 32);
        -: 1356:
        -: 1357:  yylval->re_class->negated = LEX_ENV->re_class.negated;
        -: 1358:
        -: 1359:  BEGIN(INITIAL);
        -: 1360:  return _CLASS_;
        -: 1361:}
        -: 1362:	YY_BREAK
        -: 1363:case 19:
        -: 1364:/* rule 19 can match eol */
        -: 1365:YY_RULE_SETUP
        -: 1366:#line 300 "re_lexer.l"
        -: 1367:{
        -: 1368:
        -: 1369:  // A range inside a character class.
        -: 1370:  //  [abc0-9]
        -: 1371:  //      ^- matching here
        -: 1372:
        -: 1373:  uint16_t c;
        -: 1374:  uint8_t start = yytext[0];
        -: 1375:  uint8_t end = yytext[2];
        -: 1376:
        -: 1377:  if (start == '\\')
        -: 1378:  {
        -: 1379:    if (!escaped_char_value(yytext, &start))
        -: 1380:    {
        -: 1381:      yyerror(yyscanner, lex_env, "illegal escape sequence");
        -: 1382:      yyterminate();
        -: 1383:    }
        -: 1384:
        -: 1385:    if (yytext[1] == 'x')
        -: 1386:      end = yytext[5];
        -: 1387:    else
        -: 1388:      end = yytext[3];
        -: 1389:  }
        -: 1390:
        -: 1391:  if (end == '\\')
        -: 1392:  {
        -: 1393:    if (!read_escaped_char(yyscanner, &end))
        -: 1394:    {
        -: 1395:      yyerror(yyscanner, lex_env, "illegal escape sequence");
        -: 1396:      yyterminate();
        -: 1397:    }
        -: 1398:  }
        -: 1399:
        -: 1400:  if (end < start)
        -: 1401:  {
        -: 1402:    yyerror(yyscanner, lex_env, "bad character range");
        -: 1403:    yyterminate();
        -: 1404:  }
        -: 1405:
        -: 1406:  for (c = start; c <= end; c++)
        -: 1407:  {
        -: 1408:    LEX_ENV->re_class.bitmap[c / 8] |= 1 << c % 8;
        -: 1409:  }
        -: 1410:}
        -: 1411:	YY_BREAK
        -: 1412:case 20:
        -: 1413:YY_RULE_SETUP
        -: 1414:#line 346 "re_lexer.l"
        -: 1415:{
        -: 1416:
        -: 1417:  int i;
        -: 1418:
        -: 1419:  for (i = 0; i < 32; i++)
        -: 1420:    LEX_ENV->re_class.bitmap[i] |= word_chars[i];
        -: 1421:}
        -: 1422:	YY_BREAK
        -: 1423:case 21:
        -: 1424:YY_RULE_SETUP
        -: 1425:#line 355 "re_lexer.l"
        -: 1426:{
        -: 1427:
        -: 1428:  int i;
        -: 1429:
        -: 1430:  for (i = 0; i < 32; i++)
        -: 1431:    LEX_ENV->re_class.bitmap[i] |= ~word_chars[i];
        -: 1432:}
        -: 1433:	YY_BREAK
        -: 1434:case 22:
        -: 1435:YY_RULE_SETUP
        -: 1436:#line 364 "re_lexer.l"
        -: 1437:{
        -: 1438:
        -: 1439:  LEX_ENV->re_class.bitmap[' ' / 8] |= 1 << ' ' % 8;
        -: 1440:  LEX_ENV->re_class.bitmap['\t' / 8] |= 1 << '\t' % 8;
        -: 1441:}
        -: 1442:	YY_BREAK
        -: 1443:case 23:
        -: 1444:YY_RULE_SETUP
        -: 1445:#line 371 "re_lexer.l"
        -: 1446:{
        -: 1447:
        -: 1448:  int i;
        -: 1449:
        -: 1450:  for (i = 0; i < 32; i++)
        -: 1451:  {
        -: 1452:    if (i == ' ' / 8)
        -: 1453:      LEX_ENV->re_class.bitmap[i] |= ~(1 << ' ' % 8);
        -: 1454:    else if (i == '\t' / 8)
        -: 1455:      LEX_ENV->re_class.bitmap[i] |= ~(1 << '\t' % 8);
        -: 1456:    else
        -: 1457:      LEX_ENV->re_class.bitmap[i] = 0xFF;
        -: 1458:  }
        -: 1459:}
        -: 1460:	YY_BREAK
        -: 1461:case 24:
        -: 1462:YY_RULE_SETUP
        -: 1463:#line 387 "re_lexer.l"
        -: 1464:{
        -: 1465:
        -: 1466:  char c;
        -: 1467:
        -: 1468:  for (c = '0'; c <= '9'; c++)
        -: 1469:    LEX_ENV->re_class.bitmap[c / 8] |= 1 << c % 8;
        -: 1470:}
        -: 1471:	YY_BREAK
        -: 1472:case 25:
        -: 1473:YY_RULE_SETUP
        -: 1474:#line 396 "re_lexer.l"
        -: 1475:{
        -: 1476:
        -: 1477:  int i;
        -: 1478:
        -: 1479:  for (i = 0; i < 32; i++)
        -: 1480:  {
        -: 1481:    // digits 0-7 are in the sixth byte of the vector, let that byte alone
        -: 1482:    if (i == 6)
        -: 1483:      continue;
        -: 1484:
        -: 1485:    // digits 8 and 9 are the lowest two bits in the seventh byte of the
        -: 1486:    // vector, let those bits alone.
        -: 1487:    if (i == 7)
        -: 1488:      LEX_ENV->re_class.bitmap[i] |= 0xFC;
        -: 1489:    else
        -: 1490:      LEX_ENV->re_class.bitmap[i] = 0xFF;
        -: 1491:  }
        -: 1492:}
        -: 1493:	YY_BREAK
        -: 1494:case 26:
        -: 1495:YY_RULE_SETUP
        -: 1496:#line 416 "re_lexer.l"
        -: 1497:{
        -: 1498:
        -: 1499:  uint8_t c;
        -: 1500:
        -: 1501:  if (read_escaped_char(yyscanner, &c))
        -: 1502:  {
        -: 1503:    LEX_ENV->re_class.bitmap[c / 8] |= 1 << c % 8;
        -: 1504:  }
        -: 1505:  else
        -: 1506:  {
        -: 1507:    yyerror(yyscanner, lex_env, "illegal escape sequence");
        -: 1508:    yyterminate();
        -: 1509:  }
        -: 1510:}
        -: 1511:	YY_BREAK
        -: 1512:case 27:
        -: 1513:YY_RULE_SETUP
        -: 1514:#line 432 "re_lexer.l"
        -: 1515:{
        -: 1516:
        -: 1517:  if (yytext[0] >= 32 && yytext[0] < 127)
        -: 1518:  {
        -: 1519:    // A character class (i.e: [0-9a-f]) is represented by a 256-bits vector,
        -: 1520:    // here we set to 1 the vector's bit corresponding to the input character.
        -: 1521:
        -: 1522:    LEX_ENV->re_class.bitmap[yytext[0] / 8] |= 1 << yytext[0] % 8;
        -: 1523:  }
        -: 1524:  else
        -: 1525:  {
        -: 1526:    yyerror(yyscanner, lex_env, "non-ascii character");
        -: 1527:    yyterminate();
        -: 1528:  }
        -: 1529:}
        -: 1530:	YY_BREAK
        -: 1531:case YY_STATE_EOF(char_class):
        -: 1532:#line 449 "re_lexer.l"
        -: 1533:{
        -: 1534:
        -: 1535:  // End of regexp reached while scanning a character class.
        -: 1536:
        -: 1537:  yyerror(yyscanner, lex_env, "missing terminating ] for character class");
        -: 1538:  yyterminate();
        -: 1539:}
        -: 1540:	YY_BREAK
        -: 1541:case 28:
        -: 1542:YY_RULE_SETUP
        -: 1543:#line 458 "re_lexer.l"
        -: 1544:{
        -: 1545:
        -: 1546:  if (yytext[0] >= 32 && yytext[0] < 127)
        -: 1547:  {
        -: 1548:    return yytext[0];
        -: 1549:  }
        -: 1550:  else
        -: 1551:  {
        -: 1552:    yyerror(yyscanner, lex_env, "non-ascii character");
        -: 1553:    yyterminate();
        -: 1554:  }
        -: 1555:}
        -: 1556:	YY_BREAK
        -: 1557:case YY_STATE_EOF(INITIAL):
        -: 1558:#line 472 "re_lexer.l"
        -: 1559:{
        -: 1560:
        -: 1561:  yyterminate();
        -: 1562:}
        -: 1563:	YY_BREAK
        -: 1564:case 29:
        -: 1565:YY_RULE_SETUP
        -: 1566:#line 477 "re_lexer.l"
        -: 1567:ECHO;
        -: 1568:	YY_BREAK
        -: 1569:#line 1570 "re_lexer.c"
        -: 1570:
    #####: 1571:	case YY_END_OF_BUFFER:
        -: 1572:		{
        -: 1573:		/* Amount of text matched not including the EOB char. */
    #####: 1574:		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;
        -: 1575:
        -: 1576:		/* Undo the effects of YY_DO_BEFORE_ACTION. */
    #####: 1577:		*yy_cp = yyg->yy_hold_char;
        -: 1578:		YY_RESTORE_YY_MORE_OFFSET
        -: 1579:
    #####: 1580:		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
        -: 1581:			{
        -: 1582:			/* We're scanning a new file or input source.  It's
        -: 1583:			 * possible that this happened because the user
        -: 1584:			 * just pointed yyin at a new source and called
        -: 1585:			 * yylex().  If so, then we have to assure
        -: 1586:			 * consistency between YY_CURRENT_BUFFER and our
        -: 1587:			 * globals.  Here is the right place to do so, because
        -: 1588:			 * this is the first action (other than possibly a
        -: 1589:			 * back-up) that will match for the new input source.
        -: 1590:			 */
    #####: 1591:			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    #####: 1592:			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
    #####: 1593:			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
        -: 1594:			}
        -: 1595:
        -: 1596:		/* Note that here we test for yy_c_buf_p "<=" to the position
        -: 1597:		 * of the first EOB in the buffer, since yy_c_buf_p will
        -: 1598:		 * already have been incremented past the NUL character
        -: 1599:		 * (since all states make transitions on EOB to the
        -: 1600:		 * end-of-buffer state).  Contrast this with the test
        -: 1601:		 * in input().
        -: 1602:		 */
    #####: 1603:		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
        -: 1604:			{ /* This was really a NUL. */
        -: 1605:			yy_state_type yy_next_state;
        -: 1606:
    #####: 1607:			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;
        -: 1608:
    #####: 1609:			yy_current_state = yy_get_previous_state( yyscanner );
        -: 1610:
        -: 1611:			/* Okay, we're now positioned to make the NUL
        -: 1612:			 * transition.  We couldn't have
        -: 1613:			 * yy_get_previous_state() go ahead and do it
        -: 1614:			 * for us because it doesn't know how to deal
        -: 1615:			 * with the possibility of jamming (and we don't
        -: 1616:			 * want to build jamming into it because then it
        -: 1617:			 * will run more slowly).
        -: 1618:			 */
        -: 1619:
    #####: 1620:			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);
        -: 1621:
    #####: 1622:			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
        -: 1623:
    #####: 1624:			if ( yy_next_state )
        -: 1625:				{
        -: 1626:				/* Consume the NUL. */
    #####: 1627:				yy_cp = ++yyg->yy_c_buf_p;
    #####: 1628:				yy_current_state = yy_next_state;
    #####: 1629:				goto yy_match;
        -: 1630:				}
        -: 1631:
        -: 1632:			else
        -: 1633:				{
    #####: 1634:				yy_cp = yyg->yy_last_accepting_cpos;
    #####: 1635:				yy_current_state = yyg->yy_last_accepting_state;
    #####: 1636:				goto yy_find_action;
        -: 1637:				}
        -: 1638:			}
        -: 1639:
    #####: 1640:		else switch ( yy_get_next_buffer( yyscanner ) )
        -: 1641:			{
    #####: 1642:			case EOB_ACT_END_OF_FILE:
        -: 1643:				{
    #####: 1644:				yyg->yy_did_buffer_switch_on_eof = 0;
        -: 1645:
        -: 1646:				if ( yywrap( yyscanner ) )
        -: 1647:					{
        -: 1648:					/* Note: because we've taken care in
        -: 1649:					 * yy_get_next_buffer() to have set up
        -: 1650:					 * yytext, we can now set up
        -: 1651:					 * yy_c_buf_p so that if some total
        -: 1652:					 * hoser (like flex itself) wants to
        -: 1653:					 * call the scanner after we return the
        -: 1654:					 * YY_NULL, it'll still work - another
        -: 1655:					 * YY_NULL will get returned.
        -: 1656:					 */
    #####: 1657:					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;
        -: 1658:
    #####: 1659:					yy_act = YY_STATE_EOF(YY_START);
    #####: 1660:					goto do_action;
        -: 1661:					}
        -: 1662:
        -: 1663:				else
        -: 1664:					{
        -: 1665:					if ( ! yyg->yy_did_buffer_switch_on_eof )
        -: 1666:						YY_NEW_FILE;
        -: 1667:					}
        -: 1668:				break;
        -: 1669:				}
        -: 1670:
    #####: 1671:			case EOB_ACT_CONTINUE_SCAN:
    #####: 1672:				yyg->yy_c_buf_p =
    #####: 1673:					yyg->yytext_ptr + yy_amount_of_matched_text;
        -: 1674:
    #####: 1675:				yy_current_state = yy_get_previous_state( yyscanner );
        -: 1676:
    #####: 1677:				yy_cp = yyg->yy_c_buf_p;
    #####: 1678:				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
    #####: 1679:				goto yy_match;
        -: 1680:
    #####: 1681:			case EOB_ACT_LAST_MATCH:
    #####: 1682:				yyg->yy_c_buf_p =
    #####: 1683:				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];
        -: 1684:
    #####: 1685:				yy_current_state = yy_get_previous_state( yyscanner );
        -: 1686:
    #####: 1687:				yy_cp = yyg->yy_c_buf_p;
    #####: 1688:				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
    #####: 1689:				goto yy_find_action;
        -: 1690:			}
    #####: 1691:		break;
        -: 1692:		}
        -: 1693:
    #####: 1694:	default:
    #####: 1695:		YY_FATAL_ERROR(
        -: 1696:			"fatal flex scanner internal error--no action found" );
        -: 1697:	} /* end of action switch */
        -: 1698:		} /* end of scanning one token */
        -: 1699:	} /* end of user's declarations */
        -: 1700:} /* end of yylex */
        -: 1701:
        -: 1702:/* yy_get_next_buffer - try to read in a new buffer
        -: 1703: *
        -: 1704: * Returns a code representing an action:
        -: 1705: *	EOB_ACT_LAST_MATCH -
        -: 1706: *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
        -: 1707: *	EOB_ACT_END_OF_FILE - end of file
        -: 1708: */
    #####: 1709:static int yy_get_next_buffer (yyscan_t yyscanner)
        -: 1710:{
    #####: 1711:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 1712:	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    #####: 1713:	char *source = yyg->yytext_ptr;
        -: 1714:	int number_to_move, i;
        -: 1715:	int ret_val;
        -: 1716:
    #####: 1717:	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
    #####: 1718:		YY_FATAL_ERROR(
        -: 1719:		"fatal flex scanner internal error--end of buffer missed" );
        -: 1720:
    #####: 1721:	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
        -: 1722:		{ /* Don't try to fill the buffer, so this is an EOF. */
    #####: 1723:		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
        -: 1724:			{
        -: 1725:			/* We matched a single character, the EOB, so
        -: 1726:			 * treat this as a final EOF.
        -: 1727:			 */
    #####: 1728:			return EOB_ACT_END_OF_FILE;
        -: 1729:			}
        -: 1730:
        -: 1731:		else
        -: 1732:			{
        -: 1733:			/* We matched some text prior to the EOB, first
        -: 1734:			 * process it.
        -: 1735:			 */
    #####: 1736:			return EOB_ACT_LAST_MATCH;
        -: 1737:			}
        -: 1738:		}
        -: 1739:
        -: 1740:	/* Try to read more data. */
        -: 1741:
        -: 1742:	/* First move last chars to start of buffer. */
    #####: 1743:	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);
        -: 1744:
    #####: 1745:	for ( i = 0; i < number_to_move; ++i )
    #####: 1746:		*(dest++) = *(source++);
        -: 1747:
    #####: 1748:	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        -: 1749:		/* don't do the read, it's not guaranteed to return an EOF,
        -: 1750:		 * just force an EOF
        -: 1751:		 */
    #####: 1752:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;
        -: 1753:
        -: 1754:	else
        -: 1755:		{
    #####: 1756:			int num_to_read =
    #####: 1757:			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
        -: 1758:
    #####: 1759:		while ( num_to_read <= 0 )
        -: 1760:			{ /* Not enough room in the buffer - grow it. */
        -: 1761:
        -: 1762:			/* just a shorter name for the current buffer */
    #####: 1763:			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;
        -: 1764:
    #####: 1765:			int yy_c_buf_p_offset =
    #####: 1766:				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);
        -: 1767:
    #####: 1768:			if ( b->yy_is_our_buffer )
        -: 1769:				{
    #####: 1770:				int new_size = b->yy_buf_size * 2;
        -: 1771:
    #####: 1772:				if ( new_size <= 0 )
    #####: 1773:					b->yy_buf_size += b->yy_buf_size / 8;
        -: 1774:				else
    #####: 1775:					b->yy_buf_size *= 2;
        -: 1776:
    #####: 1777:				b->yy_ch_buf = (char *)
        -: 1778:					/* Include room in for 2 EOB chars. */
    #####: 1779:					yyrealloc( (void *) b->yy_ch_buf,
    #####: 1780:							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
        -: 1781:				}
        -: 1782:			else
        -: 1783:				/* Can't grow it, we don't own it. */
    #####: 1784:				b->yy_ch_buf = NULL;
        -: 1785:
    #####: 1786:			if ( ! b->yy_ch_buf )
    #####: 1787:				YY_FATAL_ERROR(
        -: 1788:				"fatal error - scanner input buffer overflow" );
        -: 1789:
    #####: 1790:			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
        -: 1791:
    #####: 1792:			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
        -: 1793:						number_to_move - 1;
        -: 1794:
        -: 1795:			}
        -: 1796:
    #####: 1797:		if ( num_to_read > YY_READ_BUF_SIZE )
    #####: 1798:			num_to_read = YY_READ_BUF_SIZE;
        -: 1799:
        -: 1800:		/* Read in more data. */
    #####: 1801:		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
        -: 1802:			yyg->yy_n_chars, num_to_read );
        -: 1803:
    #####: 1804:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        -: 1805:		}
        -: 1806:
    #####: 1807:	if ( yyg->yy_n_chars == 0 )
        -: 1808:		{
    #####: 1809:		if ( number_to_move == YY_MORE_ADJ )
        -: 1810:			{
    #####: 1811:			ret_val = EOB_ACT_END_OF_FILE;
    #####: 1812:			yyrestart( yyin  , yyscanner);
        -: 1813:			}
        -: 1814:
        -: 1815:		else
        -: 1816:			{
    #####: 1817:			ret_val = EOB_ACT_LAST_MATCH;
    #####: 1818:			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
        -: 1819:				YY_BUFFER_EOF_PENDING;
        -: 1820:			}
        -: 1821:		}
        -: 1822:
        -: 1823:	else
    #####: 1824:		ret_val = EOB_ACT_CONTINUE_SCAN;
        -: 1825:
    #####: 1826:	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        -: 1827:		/* Extend the array by 50%, plus the number we really need. */
    #####: 1828:		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
    #####: 1829:		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
    #####: 1830:			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
    #####: 1831:		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    #####: 1832:			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
        -: 1833:		/* "- 2" to take care of EOB's */
    #####: 1834:		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
        -: 1835:	}
        -: 1836:
    #####: 1837:	yyg->yy_n_chars += number_to_move;
    #####: 1838:	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    #####: 1839:	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
        -: 1840:
    #####: 1841:	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
        -: 1842:
    #####: 1843:	return ret_val;
        -: 1844:}
        -: 1845:
        -: 1846:/* yy_get_previous_state - get the state just before the EOB char was reached */
        -: 1847:
    #####: 1848:    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
        -: 1849:{
        -: 1850:	yy_state_type yy_current_state;
        -: 1851:	char *yy_cp;
    #####: 1852:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1853:
    #####: 1854:	yy_current_state = yyg->yy_start;
        -: 1855:
    #####: 1856:	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
        -: 1857:		{
    #####: 1858:		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    #####: 1859:		if ( yy_accept[yy_current_state] )
        -: 1860:			{
    #####: 1861:			yyg->yy_last_accepting_state = yy_current_state;
    #####: 1862:			yyg->yy_last_accepting_cpos = yy_cp;
        -: 1863:			}
    #####: 1864:		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        -: 1865:			{
    #####: 1866:			yy_current_state = (int) yy_def[yy_current_state];
    #####: 1867:			if ( yy_current_state >= 45 )
    #####: 1868:				yy_c = yy_meta[yy_c];
        -: 1869:			}
    #####: 1870:		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
        -: 1871:		}
        -: 1872:
    #####: 1873:	return yy_current_state;
        -: 1874:}
        -: 1875:
        -: 1876:/* yy_try_NUL_trans - try to make a transition on the NUL character
        -: 1877: *
        -: 1878: * synopsis
        -: 1879: *	next_state = yy_try_NUL_trans( current_state );
        -: 1880: */
    #####: 1881:    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
        -: 1882:{
        -: 1883:	int yy_is_jam;
    #####: 1884:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
    #####: 1885:	char *yy_cp = yyg->yy_c_buf_p;
        -: 1886:
    #####: 1887:	YY_CHAR yy_c = 1;
    #####: 1888:	if ( yy_accept[yy_current_state] )
        -: 1889:		{
    #####: 1890:		yyg->yy_last_accepting_state = yy_current_state;
    #####: 1891:		yyg->yy_last_accepting_cpos = yy_cp;
        -: 1892:		}
    #####: 1893:	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        -: 1894:		{
    #####: 1895:		yy_current_state = (int) yy_def[yy_current_state];
    #####: 1896:		if ( yy_current_state >= 45 )
    #####: 1897:			yy_c = yy_meta[yy_c];
        -: 1898:		}
    #####: 1899:	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    #####: 1900:	yy_is_jam = (yy_current_state == 44);
        -: 1901:
        -: 1902:	(void)yyg;
    #####: 1903:	return yy_is_jam ? 0 : yy_current_state;
        -: 1904:}
        -: 1905:
        -: 1906:#ifndef YY_NO_UNPUT
        -: 1907:
        -: 1908:#endif
        -: 1909:
        -: 1910:#ifndef YY_NO_INPUT
        -: 1911:#ifdef __cplusplus
        -: 1912:    static int yyinput (yyscan_t yyscanner)
        -: 1913:#else
    #####: 1914:    static int input  (yyscan_t yyscanner)
        -: 1915:#endif
        -: 1916:
        -: 1917:{
        -: 1918:	int c;
    #####: 1919:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1920:
    #####: 1921:	*yyg->yy_c_buf_p = yyg->yy_hold_char;
        -: 1922:
    #####: 1923:	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        -: 1924:		{
        -: 1925:		/* yy_c_buf_p now points to the character we want to return.
        -: 1926:		 * If this occurs *before* the EOB characters, then it's a
        -: 1927:		 * valid NUL; if not, then we've hit the end of the buffer.
        -: 1928:		 */
    #####: 1929:		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
        -: 1930:			/* This was really a NUL. */
    #####: 1931:			*yyg->yy_c_buf_p = '\0';
        -: 1932:
        -: 1933:		else
        -: 1934:			{ /* need more input */
    #####: 1935:			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
    #####: 1936:			++yyg->yy_c_buf_p;
        -: 1937:
    #####: 1938:			switch ( yy_get_next_buffer( yyscanner ) )
        -: 1939:				{
    #####: 1940:				case EOB_ACT_LAST_MATCH:
        -: 1941:					/* This happens because yy_g_n_b()
        -: 1942:					 * sees that we've accumulated a
        -: 1943:					 * token and flags that we need to
        -: 1944:					 * try matching the token before
        -: 1945:					 * proceeding.  But for input(),
        -: 1946:					 * there's no matching to consider.
        -: 1947:					 * So convert the EOB_ACT_LAST_MATCH
        -: 1948:					 * to EOB_ACT_END_OF_FILE.
        -: 1949:					 */
        -: 1950:
        -: 1951:					/* Reset buffer status. */
    #####: 1952:					yyrestart( yyin , yyscanner);
        -: 1953:
        -: 1954:					/*FALLTHROUGH*/
        -: 1955:
    #####: 1956:				case EOB_ACT_END_OF_FILE:
        -: 1957:					{
        -: 1958:					if ( yywrap( yyscanner ) )
    #####: 1959:						return 0;
        -: 1960:
        -: 1961:					if ( ! yyg->yy_did_buffer_switch_on_eof )
        -: 1962:						YY_NEW_FILE;
        -: 1963:#ifdef __cplusplus
        -: 1964:					return yyinput(yyscanner);
        -: 1965:#else
        -: 1966:					return input(yyscanner);
        -: 1967:#endif
        -: 1968:					}
        -: 1969:
    #####: 1970:				case EOB_ACT_CONTINUE_SCAN:
    #####: 1971:					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
    #####: 1972:					break;
        -: 1973:				}
        -: 1974:			}
        -: 1975:		}
        -: 1976:
    #####: 1977:	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
    #####: 1978:	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
    #####: 1979:	yyg->yy_hold_char = *++yyg->yy_c_buf_p;
        -: 1980:
    #####: 1981:	if ( c == '\n' )
        -: 1982:		
    #####: 1983:    do{ yylineno++;
    #####: 1984:        yycolumn=0;
        -: 1985:    }while(0)
        -: 1986:;
        -: 1987:
    #####: 1988:	return c;
        -: 1989:}
        -: 1990:#endif	/* ifndef YY_NO_INPUT */
        -: 1991:
        -: 1992:/** Immediately switch to a different input stream.
        -: 1993: * @param input_file A readable stream.
        -: 1994: * @param yyscanner The scanner object.
        -: 1995: * @note This function does not reset the start condition to @c INITIAL .
        -: 1996: */
    #####: 1997:    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
        -: 1998:{
    #####: 1999:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2000:
    #####: 2001:	if ( ! YY_CURRENT_BUFFER ){
    #####: 2002:        yyensure_buffer_stack (yyscanner);
    #####: 2003:		YY_CURRENT_BUFFER_LVALUE =
    #####: 2004:            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
        -: 2005:	}
        -: 2006:
    #####: 2007:	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
    #####: 2008:	yy_load_buffer_state( yyscanner );
    #####: 2009:}
        -: 2010:
        -: 2011:/** Switch to a different input buffer.
        -: 2012: * @param new_buffer The new input buffer.
        -: 2013: * @param yyscanner The scanner object.
        -: 2014: */
    #####: 2015:    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
        -: 2016:{
    #####: 2017:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2018:
        -: 2019:	/* TODO. We should be able to replace this entire function body
        -: 2020:	 * with
        -: 2021:	 *		yypop_buffer_state();
        -: 2022:	 *		yypush_buffer_state(new_buffer);
        -: 2023:     */
    #####: 2024:	yyensure_buffer_stack (yyscanner);
    #####: 2025:	if ( YY_CURRENT_BUFFER == new_buffer )
    #####: 2026:		return;
        -: 2027:
    #####: 2028:	if ( YY_CURRENT_BUFFER )
        -: 2029:		{
        -: 2030:		/* Flush out information for old buffer. */
    #####: 2031:		*yyg->yy_c_buf_p = yyg->yy_hold_char;
    #####: 2032:		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    #####: 2033:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        -: 2034:		}
        -: 2035:
    #####: 2036:	YY_CURRENT_BUFFER_LVALUE = new_buffer;
    #####: 2037:	yy_load_buffer_state( yyscanner );
        -: 2038:
        -: 2039:	/* We don't actually know whether we did this switch during
        -: 2040:	 * EOF (yywrap()) processing, but the only time this flag
        -: 2041:	 * is looked at is after yywrap() is called, so it's safe
        -: 2042:	 * to go ahead and always set it.
        -: 2043:	 */
    #####: 2044:	yyg->yy_did_buffer_switch_on_eof = 1;
        -: 2045:}
        -: 2046:
    #####: 2047:static void yy_load_buffer_state  (yyscan_t yyscanner)
        -: 2048:{
    #####: 2049:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2050:	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    #####: 2051:	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    #####: 2052:	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    #####: 2053:	yyg->yy_hold_char = *yyg->yy_c_buf_p;
    #####: 2054:}
        -: 2055:
        -: 2056:/** Allocate and initialize an input buffer state.
        -: 2057: * @param file A readable stream.
        -: 2058: * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
        -: 2059: * @param yyscanner The scanner object.
        -: 2060: * @return the allocated buffer state.
        -: 2061: */
    #####: 2062:    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
        -: 2063:{
        -: 2064:	YY_BUFFER_STATE b;
        -: 2065:    
    #####: 2066:	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
    #####: 2067:	if ( ! b )
    #####: 2068:		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
        -: 2069:
    #####: 2070:	b->yy_buf_size = size;
        -: 2071:
        -: 2072:	/* yy_ch_buf has to be 2 characters longer than the size given because
        -: 2073:	 * we need to put in 2 end-of-buffer characters.
        -: 2074:	 */
    #####: 2075:	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
    #####: 2076:	if ( ! b->yy_ch_buf )
    #####: 2077:		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
        -: 2078:
    #####: 2079:	b->yy_is_our_buffer = 1;
        -: 2080:
    #####: 2081:	yy_init_buffer( b, file , yyscanner);
        -: 2082:
    #####: 2083:	return b;
        -: 2084:}
        -: 2085:
        -: 2086:/** Destroy the buffer.
        -: 2087: * @param b a buffer created with yy_create_buffer()
        -: 2088: * @param yyscanner The scanner object.
        -: 2089: */
    #####: 2090:    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
        -: 2091:{
    #####: 2092:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2093:
    #####: 2094:	if ( ! b )
    #####: 2095:		return;
        -: 2096:
    #####: 2097:	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
    #####: 2098:		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
        -: 2099:
    #####: 2100:	if ( b->yy_is_our_buffer )
    #####: 2101:		yyfree( (void *) b->yy_ch_buf , yyscanner );
        -: 2102:
    #####: 2103:	yyfree( (void *) b , yyscanner );
        -: 2104:}
        -: 2105:
        -: 2106:/* Initializes or reinitializes a buffer.
        -: 2107: * This function is sometimes called more than once on the same buffer,
        -: 2108: * such as during a yyrestart() or at EOF.
        -: 2109: */
    #####: 2110:    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
        -: 2111:
        -: 2112:{
    #####: 2113:	int oerrno = errno;
    #####: 2114:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2115:
    #####: 2116:	yy_flush_buffer( b , yyscanner);
        -: 2117:
    #####: 2118:	b->yy_input_file = file;
    #####: 2119:	b->yy_fill_buffer = 1;
        -: 2120:
        -: 2121:    /* If b is the current buffer, then yy_init_buffer was _probably_
        -: 2122:     * called from yyrestart() or through yy_get_next_buffer.
        -: 2123:     * In that case, we don't want to reset the lineno or column.
        -: 2124:     */
    #####: 2125:    if (b != YY_CURRENT_BUFFER){
    #####: 2126:        b->yy_bs_lineno = 1;
    #####: 2127:        b->yy_bs_column = 0;
        -: 2128:    }
        -: 2129:
    #####: 2130:        b->yy_is_interactive = 0;
        -: 2131:    
    #####: 2132:	errno = oerrno;
    #####: 2133:}
        -: 2134:
        -: 2135:/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
        -: 2136: * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
        -: 2137: * @param yyscanner The scanner object.
        -: 2138: */
    #####: 2139:    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
        -: 2140:{
    #####: 2141:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2142:	if ( ! b )
    #####: 2143:		return;
        -: 2144:
    #####: 2145:	b->yy_n_chars = 0;
        -: 2146:
        -: 2147:	/* We always need two end-of-buffer characters.  The first causes
        -: 2148:	 * a transition to the end-of-buffer state.  The second causes
        -: 2149:	 * a jam in that state.
        -: 2150:	 */
    #####: 2151:	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    #####: 2152:	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
        -: 2153:
    #####: 2154:	b->yy_buf_pos = &b->yy_ch_buf[0];
        -: 2155:
    #####: 2156:	b->yy_at_bol = 1;
    #####: 2157:	b->yy_buffer_status = YY_BUFFER_NEW;
        -: 2158:
    #####: 2159:	if ( b == YY_CURRENT_BUFFER )
    #####: 2160:		yy_load_buffer_state( yyscanner );
        -: 2161:}
        -: 2162:
        -: 2163:/** Pushes the new state onto the stack. The new state becomes
        -: 2164: *  the current state. This function will allocate the stack
        -: 2165: *  if necessary.
        -: 2166: *  @param new_buffer The new state.
        -: 2167: *  @param yyscanner The scanner object.
        -: 2168: */
    #####: 2169:void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
        -: 2170:{
    #####: 2171:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2172:	if (new_buffer == NULL)
    #####: 2173:		return;
        -: 2174:
    #####: 2175:	yyensure_buffer_stack(yyscanner);
        -: 2176:
        -: 2177:	/* This block is copied from yy_switch_to_buffer. */
    #####: 2178:	if ( YY_CURRENT_BUFFER )
        -: 2179:		{
        -: 2180:		/* Flush out information for old buffer. */
    #####: 2181:		*yyg->yy_c_buf_p = yyg->yy_hold_char;
    #####: 2182:		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    #####: 2183:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        -: 2184:		}
        -: 2185:
        -: 2186:	/* Only push if top exists. Otherwise, replace top. */
    #####: 2187:	if (YY_CURRENT_BUFFER)
    #####: 2188:		yyg->yy_buffer_stack_top++;
    #####: 2189:	YY_CURRENT_BUFFER_LVALUE = new_buffer;
        -: 2190:
        -: 2191:	/* copied from yy_switch_to_buffer. */
    #####: 2192:	yy_load_buffer_state( yyscanner );
    #####: 2193:	yyg->yy_did_buffer_switch_on_eof = 1;
        -: 2194:}
        -: 2195:
        -: 2196:/** Removes and deletes the top of the stack, if present.
        -: 2197: *  The next element becomes the new top.
        -: 2198: *  @param yyscanner The scanner object.
        -: 2199: */
    #####: 2200:void yypop_buffer_state (yyscan_t yyscanner)
        -: 2201:{
    #####: 2202:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2203:	if (!YY_CURRENT_BUFFER)
    #####: 2204:		return;
        -: 2205:
    #####: 2206:	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
    #####: 2207:	YY_CURRENT_BUFFER_LVALUE = NULL;
    #####: 2208:	if (yyg->yy_buffer_stack_top > 0)
    #####: 2209:		--yyg->yy_buffer_stack_top;
        -: 2210:
    #####: 2211:	if (YY_CURRENT_BUFFER) {
    #####: 2212:		yy_load_buffer_state( yyscanner );
    #####: 2213:		yyg->yy_did_buffer_switch_on_eof = 1;
        -: 2214:	}
        -: 2215:}
        -: 2216:
        -: 2217:/* Allocates the stack if it does not exist.
        -: 2218: *  Guarantees space for at least one push.
        -: 2219: */
    #####: 2220:static void yyensure_buffer_stack (yyscan_t yyscanner)
        -: 2221:{
        -: 2222:	yy_size_t num_to_alloc;
    #####: 2223:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2224:
    #####: 2225:	if (!yyg->yy_buffer_stack) {
        -: 2226:
        -: 2227:		/* First allocation is just for 2 elements, since we don't know if this
        -: 2228:		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
        -: 2229:		 * immediate realloc on the next call.
        -: 2230:         */
    #####: 2231:      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
    #####: 2232:		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
        -: 2233:								(num_to_alloc * sizeof(struct yy_buffer_state*)
        -: 2234:								, yyscanner);
    #####: 2235:		if ( ! yyg->yy_buffer_stack )
    #####: 2236:			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        -: 2237:
    #####: 2238:		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
        -: 2239:
    #####: 2240:		yyg->yy_buffer_stack_max = num_to_alloc;
    #####: 2241:		yyg->yy_buffer_stack_top = 0;
    #####: 2242:		return;
        -: 2243:	}
        -: 2244:
    #####: 2245:	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){
        -: 2246:
        -: 2247:		/* Increase the buffer to prepare for a possible push. */
    #####: 2248:		yy_size_t grow_size = 8 /* arbitrary grow size */;
        -: 2249:
    #####: 2250:		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
    #####: 2251:		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
    #####: 2252:								(yyg->yy_buffer_stack,
        -: 2253:								num_to_alloc * sizeof(struct yy_buffer_state*)
        -: 2254:								, yyscanner);
    #####: 2255:		if ( ! yyg->yy_buffer_stack )
    #####: 2256:			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        -: 2257:
        -: 2258:		/* zero only the new slots.*/
    #####: 2259:		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
    #####: 2260:		yyg->yy_buffer_stack_max = num_to_alloc;
        -: 2261:	}
        -: 2262:}
        -: 2263:
        -: 2264:/** Setup the input buffer state to scan directly from a user-specified character buffer.
        -: 2265: * @param base the character buffer
        -: 2266: * @param size the size in bytes of the character buffer
        -: 2267: * @param yyscanner The scanner object.
        -: 2268: * @return the newly allocated buffer state object.
        -: 2269: */
    #####: 2270:YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
        -: 2271:{
        -: 2272:	YY_BUFFER_STATE b;
        -: 2273:    
    #####: 2274:	if ( size < 2 ||
    #####: 2275:	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
    #####: 2276:	     base[size-1] != YY_END_OF_BUFFER_CHAR )
        -: 2277:		/* They forgot to leave room for the EOB's. */
    #####: 2278:		return NULL;
        -: 2279:
    #####: 2280:	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
    #####: 2281:	if ( ! b )
    #####: 2282:		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
        -: 2283:
    #####: 2284:	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
    #####: 2285:	b->yy_buf_pos = b->yy_ch_buf = base;
    #####: 2286:	b->yy_is_our_buffer = 0;
    #####: 2287:	b->yy_input_file = NULL;
    #####: 2288:	b->yy_n_chars = b->yy_buf_size;
    #####: 2289:	b->yy_is_interactive = 0;
    #####: 2290:	b->yy_at_bol = 1;
    #####: 2291:	b->yy_fill_buffer = 0;
    #####: 2292:	b->yy_buffer_status = YY_BUFFER_NEW;
        -: 2293:
    #####: 2294:	yy_switch_to_buffer( b , yyscanner );
        -: 2295:
    #####: 2296:	return b;
        -: 2297:}
        -: 2298:
        -: 2299:/** Setup the input buffer state to scan a string. The next call to yylex() will
        -: 2300: * scan from a @e copy of @a str.
        -: 2301: * @param yystr a NUL-terminated string to scan
        -: 2302: * @param yyscanner The scanner object.
        -: 2303: * @return the newly allocated buffer state object.
        -: 2304: * @note If you want to scan bytes that may contain NUL values, then use
        -: 2305: *       yy_scan_bytes() instead.
        -: 2306: */
    #####: 2307:YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
        -: 2308:{
        -: 2309:    
    #####: 2310:	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
        -: 2311:}
        -: 2312:
        -: 2313:/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
        -: 2314: * scan from a @e copy of @a bytes.
        -: 2315: * @param yybytes the byte buffer to scan
        -: 2316: * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
        -: 2317: * @param yyscanner The scanner object.
        -: 2318: * @return the newly allocated buffer state object.
        -: 2319: */
    #####: 2320:YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
        -: 2321:{
        -: 2322:	YY_BUFFER_STATE b;
        -: 2323:	char *buf;
        -: 2324:	yy_size_t n;
        -: 2325:	int i;
        -: 2326:    
        -: 2327:	/* Get memory for full buffer, including space for trailing EOB's. */
    #####: 2328:	n = (yy_size_t) (_yybytes_len + 2);
    #####: 2329:	buf = (char *) yyalloc( n , yyscanner );
    #####: 2330:	if ( ! buf )
    #####: 2331:		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
        -: 2332:
    #####: 2333:	for ( i = 0; i < _yybytes_len; ++i )
    #####: 2334:		buf[i] = yybytes[i];
        -: 2335:
    #####: 2336:	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
        -: 2337:
    #####: 2338:	b = yy_scan_buffer( buf, n , yyscanner);
    #####: 2339:	if ( ! b )
    #####: 2340:		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
        -: 2341:
        -: 2342:	/* It's okay to grow etc. this buffer, and we should throw it
        -: 2343:	 * away when we're done.
        -: 2344:	 */
    #####: 2345:	b->yy_is_our_buffer = 1;
        -: 2346:
    #####: 2347:	return b;
        -: 2348:}
        -: 2349:
        -: 2350:#ifndef YY_EXIT_FAILURE
        -: 2351:#define YY_EXIT_FAILURE 2
        -: 2352:#endif
        -: 2353:
    #####: 2354:static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
        -: 2355:{
    #####: 2356:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2357:	(void)yyg;
    #####: 2358:	fprintf( stderr, "%s\n", msg );
    #####: 2359:	exit( YY_EXIT_FAILURE );
        -: 2360:}
        -: 2361:
        -: 2362:/* Redefine yyless() so it works in section 3 code. */
        -: 2363:
        -: 2364:#undef yyless
        -: 2365:#define yyless(n) \
        -: 2366:	do \
        -: 2367:		{ \
        -: 2368:		/* Undo effects of setting up yytext. */ \
        -: 2369:        int yyless_macro_arg = (n); \
        -: 2370:        YY_LESS_LINENO(yyless_macro_arg);\
        -: 2371:		yytext[yyleng] = yyg->yy_hold_char; \
        -: 2372:		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
        -: 2373:		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
        -: 2374:		*yyg->yy_c_buf_p = '\0'; \
        -: 2375:		yyleng = yyless_macro_arg; \
        -: 2376:		} \
        -: 2377:	while ( 0 )
        -: 2378:
        -: 2379:/* Accessor  methods (get/set functions) to struct members. */
        -: 2380:
        -: 2381:/** Get the user-defined data for this scanner.
        -: 2382: * @param yyscanner The scanner object.
        -: 2383: */
    #####: 2384:YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
        -: 2385:{
    #####: 2386:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2387:    return yyextra;
        -: 2388:}
        -: 2389:
        -: 2390:/** Get the current line number.
        -: 2391: * @param yyscanner The scanner object.
        -: 2392: */
    #####: 2393:int yyget_lineno  (yyscan_t yyscanner)
        -: 2394:{
    #####: 2395:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2396:
    #####: 2397:        if (! YY_CURRENT_BUFFER)
    #####: 2398:            return 0;
        -: 2399:    
    #####: 2400:    return yylineno;
        -: 2401:}
        -: 2402:
        -: 2403:/** Get the current column number.
        -: 2404: * @param yyscanner The scanner object.
        -: 2405: */
    #####: 2406:int yyget_column  (yyscan_t yyscanner)
        -: 2407:{
    #####: 2408:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2409:
    #####: 2410:        if (! YY_CURRENT_BUFFER)
    #####: 2411:            return 0;
        -: 2412:    
    #####: 2413:    return yycolumn;
        -: 2414:}
        -: 2415:
        -: 2416:/** Get the input stream.
        -: 2417: * @param yyscanner The scanner object.
        -: 2418: */
    #####: 2419:FILE *yyget_in  (yyscan_t yyscanner)
        -: 2420:{
    #####: 2421:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2422:    return yyin;
        -: 2423:}
        -: 2424:
        -: 2425:/** Get the output stream.
        -: 2426: * @param yyscanner The scanner object.
        -: 2427: */
    #####: 2428:FILE *yyget_out  (yyscan_t yyscanner)
        -: 2429:{
    #####: 2430:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2431:    return yyout;
        -: 2432:}
        -: 2433:
        -: 2434:/** Get the length of the current token.
        -: 2435: * @param yyscanner The scanner object.
        -: 2436: */
    #####: 2437:int yyget_leng  (yyscan_t yyscanner)
        -: 2438:{
    #####: 2439:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2440:    return yyleng;
        -: 2441:}
        -: 2442:
        -: 2443:/** Get the current token.
        -: 2444: * @param yyscanner The scanner object.
        -: 2445: */
        -: 2446:
    #####: 2447:char *yyget_text  (yyscan_t yyscanner)
        -: 2448:{
    #####: 2449:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2450:    return yytext;
        -: 2451:}
        -: 2452:
        -: 2453:/** Set the user-defined data. This data is never touched by the scanner.
        -: 2454: * @param user_defined The data to be associated with this scanner.
        -: 2455: * @param yyscanner The scanner object.
        -: 2456: */
    #####: 2457:void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
        -: 2458:{
    #####: 2459:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2460:    yyextra = user_defined ;
    #####: 2461:}
        -: 2462:
        -: 2463:/** Set the current line number.
        -: 2464: * @param _line_number line number
        -: 2465: * @param yyscanner The scanner object.
        -: 2466: */
    #####: 2467:void yyset_lineno (int  _line_number , yyscan_t yyscanner)
        -: 2468:{
    #####: 2469:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2470:
        -: 2471:        /* lineno is only valid if an input buffer exists. */
    #####: 2472:        if (! YY_CURRENT_BUFFER )
    #####: 2473:           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
        -: 2474:    
    #####: 2475:    yylineno = _line_number;
    #####: 2476:}
        -: 2477:
        -: 2478:/** Set the current column.
        -: 2479: * @param _column_no column number
        -: 2480: * @param yyscanner The scanner object.
        -: 2481: */
    #####: 2482:void yyset_column (int  _column_no , yyscan_t yyscanner)
        -: 2483:{
    #####: 2484:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2485:
        -: 2486:        /* column is only valid if an input buffer exists. */
    #####: 2487:        if (! YY_CURRENT_BUFFER )
    #####: 2488:           YY_FATAL_ERROR( "yyset_column called with no buffer" );
        -: 2489:    
    #####: 2490:    yycolumn = _column_no;
    #####: 2491:}
        -: 2492:
        -: 2493:/** Set the input stream. This does not discard the current
        -: 2494: * input buffer.
        -: 2495: * @param _in_str A readable stream.
        -: 2496: * @param yyscanner The scanner object.
        -: 2497: * @see yy_switch_to_buffer
        -: 2498: */
    #####: 2499:void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
        -: 2500:{
    #####: 2501:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2502:    yyin = _in_str ;
    #####: 2503:}
        -: 2504:
    #####: 2505:void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
        -: 2506:{
    #####: 2507:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2508:    yyout = _out_str ;
    #####: 2509:}
        -: 2510:
    #####: 2511:int yyget_debug  (yyscan_t yyscanner)
        -: 2512:{
    #####: 2513:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2514:    return yy_flex_debug;
        -: 2515:}
        -: 2516:
    #####: 2517:void yyset_debug (int  _bdebug , yyscan_t yyscanner)
        -: 2518:{
    #####: 2519:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2520:    yy_flex_debug = _bdebug ;
    #####: 2521:}
        -: 2522:
        -: 2523:/* Accessor methods for yylval and yylloc */
        -: 2524:
    #####: 2525:YYSTYPE * yyget_lval  (yyscan_t yyscanner)
        -: 2526:{
    #####: 2527:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2528:    return yylval;
        -: 2529:}
        -: 2530:
    #####: 2531:void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
        -: 2532:{
    #####: 2533:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2534:    yylval = yylval_param;
    #####: 2535:}
        -: 2536:
        -: 2537:/* User-visible API */
        -: 2538:
        -: 2539:/* yylex_init is special because it creates the scanner itself, so it is
        -: 2540: * the ONLY reentrant function that doesn't take the scanner as the last argument.
        -: 2541: * That's why we explicitly handle the declaration, instead of using our macros.
        -: 2542: */
    #####: 2543:int yylex_init(yyscan_t* ptr_yy_globals)
        -: 2544:{
    #####: 2545:    if (ptr_yy_globals == NULL){
    #####: 2546:        errno = EINVAL;
    #####: 2547:        return 1;
        -: 2548:    }
        -: 2549:
    #####: 2550:    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );
        -: 2551:
    #####: 2552:    if (*ptr_yy_globals == NULL){
    #####: 2553:        errno = ENOMEM;
    #####: 2554:        return 1;
        -: 2555:    }
        -: 2556:
        -: 2557:    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    #####: 2558:    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
        -: 2559:
    #####: 2560:    return yy_init_globals ( *ptr_yy_globals );
        -: 2561:}
        -: 2562:
        -: 2563:/* yylex_init_extra has the same functionality as yylex_init, but follows the
        -: 2564: * convention of taking the scanner as the last argument. Note however, that
        -: 2565: * this is a *pointer* to a scanner, as it will be allocated by this call (and
        -: 2566: * is the reason, too, why this function also must handle its own declaration).
        -: 2567: * The user defined value in the first argument will be available to yyalloc in
        -: 2568: * the yyextra field.
        -: 2569: */
    #####: 2570:int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
        -: 2571:{
        -: 2572:    struct yyguts_t dummy_yyguts;
        -: 2573:
    #####: 2574:    yyset_extra (yy_user_defined, &dummy_yyguts);
        -: 2575:
    #####: 2576:    if (ptr_yy_globals == NULL){
    #####: 2577:        errno = EINVAL;
    #####: 2578:        return 1;
        -: 2579:    }
        -: 2580:
    #####: 2581:    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
        -: 2582:
    #####: 2583:    if (*ptr_yy_globals == NULL){
    #####: 2584:        errno = ENOMEM;
    #####: 2585:        return 1;
        -: 2586:    }
        -: 2587:
        -: 2588:    /* By setting to 0xAA, we expose bugs in
        -: 2589:    yy_init_globals. Leave at 0x00 for releases. */
    #####: 2590:    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
        -: 2591:
    #####: 2592:    yyset_extra (yy_user_defined, *ptr_yy_globals);
        -: 2593:
    #####: 2594:    return yy_init_globals ( *ptr_yy_globals );
        -: 2595:}
        -: 2596:
    #####: 2597:static int yy_init_globals (yyscan_t yyscanner)
        -: 2598:{
    #####: 2599:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2600:    /* Initialization is the same as for the non-reentrant scanner.
        -: 2601:     * This function is called from yylex_destroy(), so don't allocate here.
        -: 2602:     */
        -: 2603:
    #####: 2604:    yyg->yy_buffer_stack = NULL;
    #####: 2605:    yyg->yy_buffer_stack_top = 0;
    #####: 2606:    yyg->yy_buffer_stack_max = 0;
    #####: 2607:    yyg->yy_c_buf_p = NULL;
    #####: 2608:    yyg->yy_init = 0;
    #####: 2609:    yyg->yy_start = 0;
        -: 2610:
    #####: 2611:    yyg->yy_start_stack_ptr = 0;
    #####: 2612:    yyg->yy_start_stack_depth = 0;
    #####: 2613:    yyg->yy_start_stack =  NULL;
        -: 2614:
        -: 2615:/* Defined in main.c */
        -: 2616:#ifdef YY_STDINIT
        -: 2617:    yyin = stdin;
        -: 2618:    yyout = stdout;
        -: 2619:#else
    #####: 2620:    yyin = NULL;
    #####: 2621:    yyout = NULL;
        -: 2622:#endif
        -: 2623:
        -: 2624:    /* For future reference: Set errno on error, since we are called by
        -: 2625:     * yylex_init()
        -: 2626:     */
    #####: 2627:    return 0;
        -: 2628:}
        -: 2629:
        -: 2630:/* yylex_destroy is for both reentrant and non-reentrant scanners. */
    #####: 2631:int yylex_destroy  (yyscan_t yyscanner)
        -: 2632:{
    #####: 2633:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2634:
        -: 2635:    /* Pop the buffer stack, destroying each element. */
    #####: 2636:	while(YY_CURRENT_BUFFER){
    #####: 2637:		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
    #####: 2638:		YY_CURRENT_BUFFER_LVALUE = NULL;
    #####: 2639:		yypop_buffer_state(yyscanner);
        -: 2640:	}
        -: 2641:
        -: 2642:	/* Destroy the stack itself. */
    #####: 2643:	yyfree(yyg->yy_buffer_stack , yyscanner);
    #####: 2644:	yyg->yy_buffer_stack = NULL;
        -: 2645:
        -: 2646:    /* Destroy the start condition stack. */
    #####: 2647:        yyfree( yyg->yy_start_stack , yyscanner );
    #####: 2648:        yyg->yy_start_stack = NULL;
        -: 2649:
        -: 2650:    /* Reset the globals. This is important in a non-reentrant scanner so the next time
        -: 2651:     * yylex() is called, initialization will occur. */
    #####: 2652:    yy_init_globals( yyscanner);
        -: 2653:
        -: 2654:    /* Destroy the main struct (reentrant only). */
    #####: 2655:    yyfree ( yyscanner , yyscanner );
    #####: 2656:    yyscanner = NULL;
    #####: 2657:    return 0;
        -: 2658:}
        -: 2659:
        -: 2660:/*
        -: 2661: * Internal utility routines.
        -: 2662: */
        -: 2663:
        -: 2664:#ifndef yytext_ptr
        -: 2665:static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
        -: 2666:{
        -: 2667:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2668:	(void)yyg;
        -: 2669:
        -: 2670:	int i;
        -: 2671:	for ( i = 0; i < n; ++i )
        -: 2672:		s1[i] = s2[i];
        -: 2673:}
        -: 2674:#endif
        -: 2675:
        -: 2676:#ifdef YY_NEED_STRLEN
        -: 2677:static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
        -: 2678:{
        -: 2679:	int n;
        -: 2680:	for ( n = 0; s[n]; ++n )
        -: 2681:		;
        -: 2682:
        -: 2683:	return n;
        -: 2684:}
        -: 2685:#endif
        -: 2686:
    #####: 2687:void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
        -: 2688:{
    #####: 2689:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2690:	(void)yyg;
    #####: 2691:	return malloc(size);
        -: 2692:}
        -: 2693:
    #####: 2694:void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
        -: 2695:{
    #####: 2696:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2697:	(void)yyg;
        -: 2698:
        -: 2699:	/* The cast to (char *) in the following accommodates both
        -: 2700:	 * implementations that use char* generic pointers, and those
        -: 2701:	 * that use void* generic pointers.  It works with the latter
        -: 2702:	 * because both ANSI C and C++ allow castless assignment from
        -: 2703:	 * any pointer type to void*, and deal with argument conversions
        -: 2704:	 * as though doing an assignment.
        -: 2705:	 */
    #####: 2706:	return realloc(ptr, size);
        -: 2707:}
        -: 2708:
    #####: 2709:void yyfree (void * ptr , yyscan_t yyscanner)
        -: 2710:{
    #####: 2711:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2712:	(void)yyg;
    #####: 2713:	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
    #####: 2714:}
        -: 2715:
        -: 2716:#define YYTABLES_NAME "yytables"
        -: 2717:
        -: 2718:#line 477 "re_lexer.l"
        -: 2719:
        -: 2720:
        -: 2721:int escaped_char_value(
        -: 2722:    char* text,
        -: 2723:    uint8_t* value)
        -: 2724:{
        -: 2725:  unsigned int hex_value;
        -: 2726:  char hex[3];
        -: 2727:
        -: 2728:  assert(text[0] == '\\');
        -: 2729:
        -: 2730:  switch(text[1])
        -: 2731:  {
        -: 2732:  case 'x':
        -: 2733:    if (!isxdigit(text[2]) || !isxdigit(text[3]))
        -: 2734:      return 0;
        -: 2735:    hex[0] = text[2];
        -: 2736:    hex[1] = text[3];
        -: 2737:    hex[2] = '\0';
        -: 2738:    sscanf(hex, "%x", &hex_value);
        -: 2739:    *value = (uint8_t) hex_value;
        -: 2740:    break;
        -: 2741:
        -: 2742:  case 'n':
        -: 2743:    *value = '\n';
        -: 2744:    break;
        -: 2745:
        -: 2746:  case 't':
        -: 2747:    *value = '\t';
        -: 2748:    break;
        -: 2749:
        -: 2750:  case 'r':
        -: 2751:    *value = '\r';
        -: 2752:    break;
        -: 2753:
        -: 2754:  case 'f':
        -: 2755:    *value = '\f';
        -: 2756:    break;
        -: 2757:
        -: 2758:  case 'a':
        -: 2759:    *value = '\a';
        -: 2760:    break;
        -: 2761:
        -: 2762:  default:
        -: 2763:    *value = text[1];
        -: 2764:  }
        -: 2765:
        -: 2766:  return 1;
        -: 2767:}
        -: 2768:
        -: 2769:
        -: 2770:#ifdef __cplusplus
        -: 2771:#define RE_YY_INPUT yyinput
        -: 2772:#else
        -: 2773:#define RE_YY_INPUT input
        -: 2774:#endif
        -: 2775:
        -: 2776:
        -: 2777:int read_escaped_char(
        -: 2778:    yyscan_t yyscanner,
        -: 2779:    uint8_t* escaped_char)
        -: 2780:{
        -: 2781:  char text[4] = {0, 0, 0, 0};
        -: 2782:
        -: 2783:  text[0] = '\\';
        -: 2784:  text[1] = RE_YY_INPUT(yyscanner);
        -: 2785:
        -: 2786:  if (text[1] == EOF || text[1] == 0)
        -: 2787:    return 0;
        -: 2788:
        -: 2789:  if (text[1] == 'x')
        -: 2790:  {
        -: 2791:    text[2] = RE_YY_INPUT(yyscanner);
        -: 2792:
        -: 2793:    if (text[2] == EOF || text[2] == 0)
        -: 2794:      return 0;
        -: 2795:
        -: 2796:    text[3] = RE_YY_INPUT(yyscanner);
        -: 2797:
        -: 2798:    if (text[3] == EOF || text[3] == 0)
        -: 2799:      return 0;
        -: 2800:  }
        -: 2801:
        -: 2802:  return escaped_char_value(text, escaped_char);
        -: 2803:}
        -: 2804:
        -: 2805:
        -: 2806:void yyfatal(
        -: 2807:    yyscan_t yyscanner,
        -: 2808:    const char *error_message)
        -: 2809:{
        -: 2810:  jmp_buf* recovery_state = (jmp_buf*) yr_thread_storage_get_value(
        -: 2811:      &yr_recovery_state_key);
        -: 2812:
        -: 2813:  longjmp(*recovery_state, 1);
        -: 2814:}
        -: 2815:
        -: 2816:
        -: 2817:void yyerror(
        -: 2818:    yyscan_t yyscanner,
        -: 2819:    RE_LEX_ENVIRONMENT* lex_env,
        -: 2820:    const char *error_message)
        -: 2821:{
        -: 2822:  // if lex_env->last_error was set to some error code before
        -: 2823:  // don't overwrite it, we are interested in the first error, not in
        -: 2824:  // subsequent errors like "syntax error, unexpected $end" caused by
        -: 2825:  // early parser termination.
        -: 2826:
        -: 2827:  if (lex_env->last_error == ERROR_SUCCESS)
        -: 2828:  {
        -: 2829:    lex_env->last_error = ERROR_INVALID_REGULAR_EXPRESSION;
        -: 2830:
        -: 2831:    strlcpy(
        -: 2832:        lex_env->last_error_message,
        -: 2833:        error_message,
        -: 2834:        sizeof(lex_env->last_error_message));
        -: 2835:  }
        -: 2836:}
        -: 2837:
        -: 2838:
        -: 2839:int yr_parse_re_string(
        -: 2840:  const char* re_string,
        -: 2841:  RE_AST** re_ast,
        -: 2842:  RE_ERROR* error)
        -: 2843:{
        -: 2844:  yyscan_t yyscanner;
        -: 2845:  jmp_buf recovery_state;
        -: 2846:  RE_LEX_ENVIRONMENT lex_env;
        -: 2847:
        -: 2848:  lex_env.last_error = ERROR_SUCCESS;
        -: 2849:  lex_env.last_error_message[0] = '\0';
        -: 2850:
        -: 2851:  yr_thread_storage_set_value(&yr_recovery_state_key, &recovery_state);
        -: 2852:
        -: 2853:  if (setjmp(recovery_state) != 0)
        -: 2854:    return ERROR_INTERNAL_FATAL_ERROR;
        -: 2855:
        -: 2856:  FAIL_ON_ERROR(yr_re_ast_create(re_ast));
        -: 2857:
        -: 2858:  yylex_init(&yyscanner);
        -: 2859:  yyset_extra(*re_ast, yyscanner);
        -: 2860:  yy_scan_string(re_string, yyscanner);
        -: 2861:  yyparse(yyscanner, &lex_env);
        -: 2862:  yylex_destroy(yyscanner);
        -: 2863:
        -: 2864:  if (lex_env.last_error != ERROR_SUCCESS)
        -: 2865:  {
        -: 2866:    yr_re_ast_destroy(*re_ast);
        -: 2867:    *re_ast = NULL;
        -: 2868:
        -: 2869:    strlcpy(
        -: 2870:        error->message,
        -: 2871:        lex_env.last_error_message,
        -: 2872:        sizeof(error->message));
        -: 2873:
        -: 2874:    return lex_env.last_error;
        -: 2875:  }
        -: 2876:
        -: 2877:  return ERROR_SUCCESS;
        -: 2878:}
        -: 2879:
